#+TITLE: Emacs Configuration
#+AUTHOR: Nelson Loyola
#+STARTUP: overview
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+OPTIONS: broken-links:t
#+PROPERTY: header-args  :results silent

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley,
which is a fantastic way to manage package configurations.

This file is used to generate ~config.el~ using ~org-babel~ in ~init.el~.

* Installing Emacs
** Ubuntu

I've installed Emacs from source
(=git://git.savannah.gnu.org/emacs.git=). I used the instructions
provided by Xah Lee given [[http://ergoemacs.org/emacs/building_emacs_on_linux.html][here]]. But first, the following command has to
be run.

#+begin_src sh
./autogen.sh
#+end_src

Then to compile and install, do the following.

#+begin_src sh
./configure
make bootstrap
make
sudo make install
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Nelson Loyola"
      user-mail-address "nloyola@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Font
** Linux
*** My Font Config

Also see: all-the-icons-dired package installation

#+begin_src  emacs-lisp
;; (defvar nl/gui-fixed-font-name "Fira Code Retina")

;; (defvar nl/gui-fixed-font-name "IBM Plex Mono Medium")
;; (defvar nl/gui-variable-font-name "DejaVu Sans")

(defvar nl/gui-fixed-font-name "Go Mono")
(defvar nl/gui-variable-font-name "Go")

(defconst nl/gui-fixed-font-size-normal "12")
(defconst nl/gui-fixed-font-size-large "22")

(defconst nl/gui-variable-font-size-normal "16")
(defconst nl/gui-variable-font-size-large "22")

(defvar nl/gui-current-fixed-font-size nl/gui-fixed-font-size-normal)
(defvar nl/gui-current-variable-font-size nl/gui-variable-font-size-normal)

(defun nl/gui-font (font-name font-size)
  (concat font-name "-" font-size))

(defun nl/gui-fixed-font-normal ()
  (nl/gui-font nl/gui-fixed-font-name nl/gui-fixed-font-size-normal))

(defun nl/gui-fixed-font-large ()
  (nl/gui-font nl/gui-fixed-font-name nl/gui-fixed-font-size-large))

(defun nl/gui-variable-font-normal ()
  (nl/gui-font nl/gui-variable-font-name nl/gui-variable-font-size-normal))

(defun nl/gui-variable-font-large ()
  (nl/gui-font nl/gui-variable-font-name nl/gui-variable-font-size-large))
#+end_src

*** Assigning frame fonts

#+begin_src emacs-lisp
;; see: https://github.com/daviwil/emacs-from-scratch/blob/d24357b488862223fecaebdad758b136b0ca96e7/show-notes/Emacs-Tips-08.org#configuring-the-ui-for-new-frames
(defun nl/set-fonts (frame)
  "Set the desired fonts for a frame. FRAME can be nil."
  (let ((fixed-font (nl/gui-fixed-font-normal)))
    (set-face-font 'default fixed-font)
    (set-face-font 'fixed-pitch fixed-font))
  (set-face-font 'variable-pitch (nl/gui-variable-font-normal))

  ;;(set-face-attribute 'default frame :font nl/gui-fixed-font-name)
  (set-face-attribute 'italic frame :font nl/gui-fixed-font-name :weight 'normal :slant 'italic)
  (set-face-attribute 'bold frame :font nl/gui-fixed-font-name :weight 'bold :weight 'normal)
  (set-face-attribute 'bold-italic frame :font nl/gui-fixed-font-name :weight 'bold :slant 'italic)
  (set-fontset-font "fontset-default" nil
                    (font-spec :size 20 :name "Fira Code Retina")))

(defun nl/after-make-frame (frame)
  (nl/set-fonts frame))

(add-hook 'after-make-frame-functions 'nl/after-make-frame t)

(nl/set-fonts nil)
#+end_src

*** Ligatures

Does not really work when not using Fira Code fonts.

#+begin_src emacs-lisp :tangle no
(use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
  :hook prog-mode) ;; Enables fira-code-mode automatically for programming major modes
#+end_src

*** Input font Installation

Not used since using Googles' Go fonts. 2021-02-27

[[http://input.fontbureau.com/download/][Input Font]]: Install it on Ubuntu as follows:

#+begin_src sh :tangle no
sudo apt-get install fonts-firacode
#+end_src

**** Emacs config

And here's how to tell Emacs to use this font. Copy the following line to your =~/.Xresources= file.

#+begin_src sh :tangle no
Emacs.font: Input Mono Condensed-9
#+end_src

And then merge the setting to your X server resource database.

#+begin_src sh :tangle no
xrdb -merge ~/.Xresources
#+end_src

Using Fira Code now. See below.

#+begin_src emacs-lisp :tangle no
(set-face-font 'default "Input Mono Condensed-14")
#+end_src

*** Symbola

Not used since using Googles' Go fonts. 2021-02-27

download from here: [[https://fonts2u.com/symbola.font][Symbola font]]

#+begin_src sh :tangle no
mv symbola.zip ~/.fonts
cd ~/.fonts
unzip symbola.zip
#+end_src

#+begin_src emacs-lisp :tangle no
(set-fontset-font "fontset-default" nil
                  (font-spec :size 20 :name "Symbola"))
#+end_src

** OSX

#+begin_src emacs-lisp
(when (featurep 'ns-win) (set-face-font 'default "Monaco-15"))
#+end_src

* Sane defaults
** General

#+begin_src emacs-lisp
(use-package emacs
  :hook
  ;; Make completion buffers disappear after 15 seconds.
  (completion-setup . (lambda ()
                        (run-at-time 15 nil
                                     (lambda ()
                                       (delete-windows-on "*Completions*")))))

  ;; Remove trailing whitespace
  (before-save . delete-trailing-whitespace)
  :bind
  ("C-z" . nil)     ;; I never want to suspend the frame
  )
#+end_src

Some commands are disabled by default. They are enabled in our config
using the following:

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'erase-buffer 'disabled nil)

;; Sentences end with a single space.
(setq sentence-end-double-space nil)

;; Set the default major mode to =text-mode=. By default it's =fundamental= mode which is
;; not what we want. Also, use =text-mode= for the scratch buffer.

(setq default-major-mode 'text-mode
      initial-major-mode 'text-mode)

;; Don't scroll to middle of the page. Also, scroll line by line, without
;; scrolloff and try to keep point at the same visual place when
;; scrolling by page.
(setq-default scroll-up-aggressively 0.01 scroll-down-aggressively 0.01)
(setq redisplay-dont-pause t
      scroll-step 1
      scroll-margin 3
      scroll-conservatively 10
      scroll-preserve-screen-position t)

;; Level of decoration {1 - 3}, t = max.
(setq font-lock-maximum-decoration t)

;; For symlinks, automatically follow the link and visit the real file instead.
(setq vc-follow-symlinks nil)

;; Make searches case insensitive.
(setq-default case-fold-search t)

;; Autosave files are created between saves after a sufficient timeout in
;; the current directory for crash detection, they begin and end with
;; =#=.  Change this location to the emacs directory.
(setq auto-save-list-file-prefix "~/.emacs.d/autosave/"
      auto-save-file-name-transforms `((".*" "~/.emacs.d/autosave/" t)))

;;Set line wrap at column 100.
(setq fill-column 100)

;; Replace =yes or no= prompt with =y or n= prompt.
(fset 'yes-or-no-p 'y-or-n-p)

;; Use UTF-8 everywhere.
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Use spaces instead of tabs.
(setq-default indent-tabs-mode nil)

;; Delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

;; Highlight matches in query-replace mode.
(setq query-replace-highlight t)

;; Use visual line mode to display long lines.
(global-visual-line-mode -1)

;;Revert these files without asking.
(setq revert-without-query '(".*"))

;; Middle-clicking is nice to paste, however it should not adjust point
;; and paste at the then adjusted point.
(setq mouse-yank-at-point t)

;; Save clipboard data of other programs in the kill ring when possible.
(setq save-interprogram-paste-before-kill t)

;; Set environment variable for shells.
(setenv "PAGER" "cat")

;; Configure =next-buffer= and =previous-buffer= to only visit file
;; buffers (has to be called for each frame):
(set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)

;; These are taken from
;; https://github.com/patrickt/emacs/blob/master/init.el:
(setq
 kill-whole-line t                      ; Lets C-k delete the whole line
 ;;default-directory "~/src/"             ; My code lives here
 enable-recursive-minibuffers t         ; don't freak out if I use the minibuffer twice
 sentence-end-double-space nil          ; are you kidding me
 confirm-kill-processes nil             ; don't when quitting
 )

(setq-default
 cursor-type 'box
 indent-tabs-mode nil
 cursor-in-non-selected-windows nil)

;; Cursor Movement
(setq auto-window-vscroll nil)

;; Turn off auto-save.
(setq auto-save-default nil)

;; Don't make any backup files.
(setq make-backup-files nil)

;; Get rid of the menu bar. Tool bar and scroll bars are disabled in
;; ~init.el~..
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; Turn off the blinking cursor.
(blink-cursor-mode -1)

;; Don't use dialog boxes
(setq use-dialog-box nil)

;; Don't want an audible bell.
(setq visible-bell t)

;; Display the running program and the selected buffer in the frame title.
(setq frame-title-format
      '("" invocation-name ": " (:eval (replace-regexp-in-string
                                        "^ +" "" (buffer-name)))))
;; Don't add new lines past end of file, and indicate unused lines at the
;; end of the window with a small image in the left fringe.
(setq next-line-add-newlines nil)
(setq-default indicate-empty-lines t)

;; Add =\n= to end of file if required.
(setq require-final-newline t)

;; Eshell
(setq eshell-history-size 100000)

;; Follow Buffer

(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))

;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)

;; Automatically cycle through the highlighting faces listed in
;; ~hi-lock-face-defaults~ instead of bothering the user to pick a face
;; each time.
(setq hi-lock-auto-select-face t)

;; History
(setq history-delete-duplicates t)

;; Use the directory name to make buffer names unique.
(setq uniquify-buffer-name-style 'forward)
#+end_src

** Key bindings

http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/

#+begin_src emacs-lisp
(defun nl/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(defun nl/helm-compile ()
  "Use Helm to choose a compile command."
  (interactive)
  (let ((selected-command
         (helm-comp-read "Select a compile command: " compile-history :buffer "Helm compile commands")))
    ;; move this command to the front of the history
    (setq compile-history (remove selected-command compile-history))
    (add-to-list 'compile-history selected-command)
    (compile selected-command)))

(defun nl/counsel-git-files ()
  (interactive)
  (let ((counsel-fzf-cmd "git ls-files | fzf -f \"%s\""))
    (counsel-fzf)))

(global-set-key (kbd "M-%")           'query-replace-regexp)
;;(global-set-key "\C-x\C-e"          'compile)
(global-set-key (kbd "C-S-s")         'isearch-forward)
(global-set-key (kbd "C-x C-n")       'next-error)
(global-set-key (kbd "C-x k")         'nl/kill-this-buffer)
(global-set-key (kbd "M-f")           'forward-to-word)
(global-set-key (kbd "M-B")           'backward-to-word)

(global-set-key (kbd "<f1>")          'indent-for-tab-command)
(global-set-key (kbd "S-<f1>")        'indent-region)
(global-set-key (kbd "<f2>")          '(lambda () (interactive) (save-some-buffers t)))
(global-set-key (kbd "S-<f2>")        '(lambda () (interactive) (revert-buffer t t)))
(global-set-key (kbd "S-<f3>")        'helm-projectile-rg)
(global-set-key (kbd "M-S-<f3>")      'counsel-rg)
(global-set-key [f5]                  'nl/helm-compile)
(global-set-key (kbd "S-<f5>")        'toggle-truncate-lines)
(global-set-key (kbd "<f8>")          'window-toggle-side-windows)
(global-set-key (kbd "S-<f11>")       'eval-region)
(global-set-key (kbd "C-S-<f11>")     'align-regexp)
(global-set-key (kbd "C-c o")         'nl/counsel-git-files)
#+end_src

** Line numbers.

Recently, line numbering has been really slow. Disabling for now.

#+begin_src emacs-lisp :tangle no
(dolist (mode-hook '(text-mode-hook prog-mode-hook))
  (add-hook mode-hook 'linum-mode))
#+end_src

Emacs 26 added ~global-display-line-numbers-mode~:

#+begin_src emacs-lisp
(dolist (mode-hook '(prog-mode-hook))
  (when (version<= "26.0.50" emacs-version)
    (add-hook mode-hook 'display-line-numbers-mode)))
#+end_src

** Tags

Case sensitive tags search:

#+begin_src emacs-lisp
(set-default 'tags-case-fold-search nil)
#+end_src

** Text mode

Don't like this: disabling. 2021-02-28

#+begin_src emacs-lisp :tangle no
(setq text-mode-hook
      '(lambda ()
         (turn-on-auto-fill)))            ; Enable automatic line wrapping
#+end_src

** Prefer Newer Versions

To reduce the risk of loading outdated byte code files, we set
load-prefer-newer and enable auto-compile-on-load-mode as early as
possible.

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** =prog-mode=

#+begin_src emacs-lisp
(defun nl/indent-whole-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max))))

(defun nl/beginning-of-line-or-indentation ()
  "move to beginning of line, or indentation"
  (interactive)
  (if (bolp)
      (back-to-indentation)
    (beginning-of-line)))

(defun nl/common-prog-mode-settings ()
  "Enables settings common between programming language modes."
  (nl/setup-indent 2) ; indent 2 spaces width
  (local-set-key (kbd "<home>") 'nl/beginning-of-line-or-indentation)
  (subword-mode 1)
  ;;
  ;; Set tab and CR/LF keys to call their corresponding more-general
  ;; functions.  This needs to be here to override the settings of some modes
  ;; (e.g. c++-mode changes the tab key to do a re-indent).
  ;;
  (local-set-key "\t" 'tab-to-tab-stop)
  (local-set-key "\n" 'newline-and-indent)
  (local-set-key "\r" 'newline-and-indent)
  ;;
  ;; Set paragraph/comment auto-formatting to wrap at column 100.
  ;;
  (set-fill-column 100)
  ;;
  ;; Set the comment column to zero so that lisp comment lines will act like
  ;; C++ comments (i.e. line up with the code), and not automatically indent
  ;; to column 50.
  ;;
  (setq comment-column 0)
  (push '(">=" . ?≥) prettify-symbols-alist)
  (push '("<=" . ?≤) prettify-symbols-alist)
  (push '("->" . ?→) prettify-symbols-alist)
  (smartparens-mode))

(add-hook 'makefile-mode-hook 'nl/common-prog-mode-settings)
(add-hook 'sh-mode-hook       'nl/common-prog-mode-settings)
(add-hook 'prog-mode-hook     'nl/common-prog-mode-settings)
#+end_src

** Set default browser

#+begin_src emacs-lisp
(when (equal system-type 'gnu/linux)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "/usr/bin/brave-browser"
        browse-url-generic-args '("--force-device-scale-factor=1.4")))
(setenv "BROWSER" "google-chrome")
#+end_src

** Side Windows

https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html#Side-Windows

#+begin_src emacs-lisp
(defvar nl/side-window-parameters
  '(window-parameters . ((no-other-window . nil)
                         (no-delete-other-windows . t))))

(setq fit-window-to-buffer-horizontally t)
(setq window-resize-pixelwise t)

;; (setq display-buffer-alist '())

;; (defun nl/display-buffer-debug(buf-name action)
;;   (message "%s" buf-name)
;;   (numberp (string-match "\\(?:\\*\\(?:[Hh]elp\\|grep\\|Warnings\\|Completions\\|xref\\)\\)\\*\\)\\|\\(?:\\(?:HELM.*\\|helm.*\\)\\)" buf-name)))

(add-to-list 'display-buffer-alist
             '("\\(?:\\*\\(?:grep\\|Find\\|Warnings\\|Completions\\|xref\\)\\*\\)\\|\\(?:\\(?:HELM.*\\|helm.*\\|\\*Flycheck.*\\)\\)"
               display-buffer-in-side-window
               (window-height . 0.15)
               (side . bottom)
               (slot . -1) ;; left side
               (preserve-size . (nil . t))
               ,nl/side-window-parameters))

(add-to-list 'display-buffer-alist
             '("\\*\\(?:[Hh]elp\\|Backtrace\\|Warnings\\|Compile-Log\\|shell\\|compilation\\|ng-compile\\|ng-test\\|tide-references\\|sbt\\|coverlay-stats\\)\\*"
               display-buffer-in-side-window
               (window-height . 0.2)
               (side . bottom)
               (slot . 1) ;; right side
               (preserve-size . (nil . t))
               ,nl/side-window-parameters))
#+end_src

** Unicode

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

* Languages

** Identation config

Use spaces instead of ~\t~ character.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

A way to set up indentation for all programming modes. Taken from
[[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][here]].

#+begin_src emacs-lisp
(defun nl/setup-indent (n)
  ;; java / c / c++ / php
  (setq-default c-basic-offset n
                javascript-indent-level n            ; javascript-mode
                js-indent-level n                    ; js-mode
                js2-basic-offset n                   ; js2-mode, in latest js2-mode, it's alias of js-indent-level
                js2-strict-missing-semi-warning nil  ;
                web-mode-markup-indent-offset n      ; web-mode, html tag in html file
                web-mode-css-indent-offset n         ; web-mode, css in html file
                web-mode-code-indent-offset n        ; web-mode, js code in html file
                css-indent-offset n))                ; css-mode
#+end_src

** Emacs lisp

#+begin_src  emacs-lisp
(setq emacs-lisp-mode-hook 'nl/common-prog-mode-settings)
#+end_src

* Packages bundled with Emacs
** =auto-revert=

Revert file buffers updated outside of emacs, unless I've made changes to
the buffer which I haven't saved.

#+begin_src emacs-lisp
(use-package autorevert
  :diminish auto-revert-mode
  :hook (dired-mode . auto-revert-mode)
  :config
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
  (global-auto-revert-mode 1))

#+end_src

** =ansi-color=

#+begin_src emacs-lisp
(use-package ansi-color
  :config
  (defun ansi-colorize-current-buffer ()
    "Colorize ansi escape sequences in the current buffer."
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max))))
#+end_src

** =bookmark=

Prefer saving this file somewhere other than the default.

#+begin_src emacs-lisp
(setq bookmark-default-file "~/.emacs.d/etc/bookmarks")
#+end_src

** =compile=

Do not ask me to save files before compiling, or kill a previous
compilation. Also scroll to the end of the compilation buffer when it
is opened.

Enable ANSI colors for compilation buffers.

#+begin_src emacs-lisp
(use-package compile
  ;;:bind (("C-c c" . compile)
  ;;       ("M-O"   . show-compilation))
  :preface
  (defun show-compilation ()
    (interactive)
    (let ((compile-buf
           (catch 'found
             (dolist (buf (buffer-list))
               (if (string-match "\\*compilation\\*" (buffer-name buf))
                   (throw 'found buf))))))
      (if compile-buf
          (switch-to-buffer-other-window compile-buf)
        (call-interactively 'compile))))

  (defun compilation-ansi-color-process-output ()
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker)))

  ;; (defun colorize-compilation-buffer ()
  ;;   (let ((inhibit-read-only t))
  ;;     (ansi-color-apply-on-region (point-min) (point-max))))
  ;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  :config
  (setq compilation-ask-about-save nil
        compilation-always-kill t
        compilation-scroll-output t

        ;; so that next-error does not open a new window
        split-width-threshold 200)

  :hook (compilation-filter . compilation-ansi-color-process-output))
#+end_src

** =cc-mode=

#+begin_src emacs-lisp
(use-package cc-mode
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'"                   . c-mode)
         ("\\.mm\\'"                  . c++-mode)
         ("\\.java\\'"                . java-mode))
  :preface
  (defconst nelson-c-style
    '((c-tab-always-indent . t)
      (c-set-style "K&R")
      (c-offsets-alist . ((statement-block-intro . +)
                          (substatement-open     . 0)
                          (label                 . 0)
                          (case-label            . +)
                          (statement-cont        . +)
                          (innamespace           . 0))))
    "Nelson programming style.")

  ;; Customizations for all of c-mode, c++-mode, and objc-mode
  (defun nl/c-mode-common-hook ()
    ;; add my personal style and set it for the current buffer
    (c-add-style "NELSON-c-mode" nelson-c-style t)
    ;; offset customizations not in nelson-c-style
    (c-set-offset 'member-init-intro '++)
    ;; other customizations
    ;;(c-toggle-auto-state 1) ;; Turn on auto newline
    (nl/common-prog-mode-settings)
    ;; makes the underscore part of a word in C and C++ modes
    (modify-syntax-entry ?_ "w" c++-mode-syntax-table)
    (modify-syntax-entry ?_ "w" c-mode-syntax-table)
    (lambda ()
      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
        (ggtags-mode 1)))
    )

  (defun nl/java-mode-hook ()
    (setq indent-tabs-mode nil)
    (setq c-basic-offset 2)
    ;;(setq zeal-at-point-docset "java")
    ;;(eclim-mode t)
    )

  :hook ((c-mode-common . nl/c-mode-common-hook)
         (java-mode . nl/java-mode-hook)))
#+end_src

** =cperl-mode=

#+begin_src emacs-lisp
(use-package cperl-mode
  :preface
  (defun nl/cperl-setup ()
    (cperl-set-style "C++")
    (nl/common-prog-mode-settings))

  :hook (cperl-mode . nl/cperl-setup))
#+end_src

** =desktop.el=

#+begin_src emacs-lisp :tangle no
(desktop-save-mode 1)
#+end_src

** =dired=

Make dired show directories first. Dired buffers should auto revert
and not give any use feedback (source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]).

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  (dired-dwim-target t)
  :config
  (setq dired-listing-switches "-aBhl --group-directories-first")
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode)
         (dired-mode . (lambda ()
                         (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                         ;;(local-set-key (kbd "RET") #'dired-find-alternate-file)
                         (local-set-key (kbd "^")
                                        (lambda () (interactive) (find-alternate-file "..")))))))
#+end_src

** =ediff=
#+begin_src emacs-lisp
(use-package ediff
  :custom
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-diff-options "-w")
  :config
  (setq-default ediff-ignore-similar-regions t)
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo))
#+end_src

** =emacsclient=

#+begin_src emacs-lisp
(use-package edit-server
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t))
#+end_src

** =flyspell=

#+begin_src emacs-lisp
(use-package flyspell-correct)

(use-package flyspell
  :requires flyspell-popup
  :diminish flyspell-mode
  :hook ((prog-mode-hook . flyspell-prog-mode)
         (text-mode-hook . flyspell-mode))
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-correct-wrapper))
  :config
  ;; Sets flyspell correction to use two-finger mouse click
  (setq ispell-dictionary "en_CA-wo_accents")
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word))
#+end_src

** =ispell=

Find aspell and hunspell automatically.

Taken from here: http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html

#+begin_src emacs-lisp :tangle no
;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun flyspell-detect-ispell-args (&optional run-together)
  "if RUN-TOGETHER is true, spell check the CamelCase words."
  (let (args)
    (cond
     ((string-match  "aspell$" ispell-program-name)
      ;; Force the English dictionary for aspell
      ;; Support Camel Case spelling check (tested with aspell 0.6)
      (setq args (list "--sug-mode=ultra" "--lang=en_CA"))
      (if run-together
          (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
     ((string-match "hunspell$" ispell-program-name)
      ;; Force the English dictionary for hunspell
      (setq args "-d en_CA")))
    args))

(cond
 ((executable-find "aspell")
  ;; you may also need `ispell-extra-args'
  (setq ispell-program-name "aspell"
        ispell-dictionary "en_CA"
        ispell-local-dictionary "en_CA"))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")

  ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
  ;; it's also used as the key to lookup ispell-local-dictionary-alist
  ;; if we use different dictionary
  (setq ispell-dictionary "en_CA"
        ispell-local-dictionary "en_CA"
        ispell-local-dictionary-alist
        '(("en_CA" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_CA") nil utf-8))))
 (t (setq ispell-program-name nil)))

;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
;; Please note when you use hunspell, ispell-extra-args will NOT be used.
;; Hack ispell-local-dictionary-alist instead.
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
(defadvice ispell-word (around nl/ispell-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))

(defadvice flyspell-auto-correct-word (around nl/flyspell-auto-correct-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original arguments
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))

(defun text-mode-hook-setup ()
  ;; Turn off RUN-TOGETHER option when spell check text-mode
  (setq-local ispell-extra-args (flyspell-detect-ispell-args)))

(add-hook 'text-mode-hook 'text-mode-hook-setup)
#+end_src

** =ibuffer=

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
(use-package ibuffer
  :preface
  (setq ibuffer-show-empty-filter-groups nil
        ibuffer-saved-filter-groups
        '(("home"
           ("emacs-config" (filename . ".emacs.d"))
           ("org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("dired" (mode . dired-mode))
           ("scala" (mode . scala-mode))
           ("JS" (mode . js2-mode))
           ("html" (mode . web-mode))
           ("php" (mode . php-mode))
           ("code" (filename . "src"))
           ("Magit" (name . "\*magit"))
           ("Helm" (name . "\*helm"))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (name . "\*info\*"))))))
  (defalias 'list-buffers 'ibuffer)

  :hook (ibuffer-mode . (lambda() (ibuffer-switch-to-saved-filter-groups "home"))))
#+end_src
** =org-mode=

#+begin_src emacs-lisp
(defun nl/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode)
  (auto-fill-mode 0)
  (diminish org-indent-mode)
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-c a") 'org-agenda)
  (define-key org-mode-map (kbd "M-<left>") nil)
  (define-key org-mode-map (kbd "M-<right>") nil)
  (define-key org-mode-map (kbd "M-<down>") nil)
  (define-key org-mode-map (kbd "M-<up>") nil))

;; (nl/org-mode-faces 120)

(defun nl/org-mode-faces (font-height)
  (require 'org)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.05)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.05)
                  (org-level-7 . 1.05)
                  (org-level-8 . 1.05)))
    (set-face-attribute (car face) nil :font nl/gui-variable-font-name :weight 'regular :height (cdr face)))

  (require 'org-indent)
  (require 'org-tempo)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil  :font nl/gui-fixed-font-name :height font-height :weight 'semi-bold)
  (set-face-attribute 'org-code nil   :font nl/gui-fixed-font-name :height font-height :weight 'semi-bold)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch) :height font-height)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch) :height font-height)
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch) :height font-height)
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch) :height font-height)
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch :height font-height)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch :height font-height)
  (set-face-attribute 'org-formula  nil :inherit 'fixed-pitch :height font-height))

(use-package org
  :pin org
  :hook (org-mode . nl/org-mode-setup)
  :custom-face
  (org-table ((t :foreground "#91b831")))
  :config
  (setq org-ellipsis " ⤵"
        org-hide-emphasis-markers t
        org-catch-invisible-edits 'error
        org-startup-indented t
        org-cycle-include-plain-lists 'integrate
        org-return-follows-link t
        org-M-RET-may-split-line nil
        org-src-fontify-natively t
        org-src-preserve-indentation t
        org-edit-src-content-indentation 0
        org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        ;; org-link-frame-setup '((file . find-file))
        org-export-backends '(ascii html icalendar latex md)
        org-log-into-drawer t)

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/orgfiles/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("n" "Note" entry (file "~/Dropbox/orgfiles/notes.org")
           "* NOTE %?\n%U" :empty-lines 1)
          ("N" "Note with Clipboard" entry (file "~/Dropbox/orgfiles/notes.org")
           "* NOTE %?\n%U\n   %c" :empty-lines 1)
          ("j" "Journal" entry (file+datetree "~/Dropbox/orgfiles/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  (nl/org-mode-faces (* 10 (string-to-number nl/gui-fixed-font-size-normal))))
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/orgfiles/todo.org"
                      "~/Dropbox/orgfiles/cbsr_todo.org"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/orgfiles/notes.org")
#+end_src

*** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

#+begin_src emacs-lisp
(setq org-use-speed-commands t
      org-image-actual-width 550)
#+end_src

*** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

*** Org babel languages

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (calc . t)
     (emacs-lisp . t)
     (latex . t)
     (java . t)
     (js . t)
     (python . t)
     (ruby . t)
     (shell . t)
     (sql . t)
     (sqlite . t)))

  (defun nl/org-confirm-babel-evaluate (lang body)
    "Do not confirm evaluation for these languages."
    (not (or (string= lang "C")
             (string= lang "emacs-lisp")
             (string= lang "java")
             (string= lang "python")
             (string= lang "sh")
             (string= lang "sql")
             (string= lang "sqlite"))))
  (setq org-confirm-babel-evaluate 'nl/org-confirm-babel-evaluate))
#+end_src

*** Org babel/source blocks

Have source blocks properly syntax highlighted and with the editing
popup window staying within the same window so all the windows don't
jump around. Also, having the top and bottom trailing lines in the
block is a waste of space, so we can remove them.

Fontification doesn't work with markdown mode when the block is
indented after editing it in the org src buffer---the leading #s for
headers don't get fontified properly because they appear as Org
comments.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-tab-acts-natively t)
#+end_src

*** Structure templates

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
** =paren=

#+begin_src emacs-lisp
(use-package paren
  :hook
  (prog-mode . (lambda () (show-paren-mode t)))
  :custom-face
  (show-paren-match ((t (:background "#def" :box nil))))
  :custom
  (show-paren-style 'parenthesis))
#+end_src

** =re-builder=

Interactive preview for RE construction.

It's important to note that there's three flavours of regular
expressions encountered in Emacs.  The =read= syntax is most
reminiscent of other RE dialects, but only used in prompts.  The
=string= syntax is used in code doubles the amount of backslashes as
the RE strings are passed through the reader which removes the
extraneous ones.  Finally, there's the ~rx~ macro one can use for
writing lispy RE.

All listed RE syntaxes are supported by =re-builder=. For whatever
reason though the =read= syntax is default. I prefer having the
=string= syntax as default.

#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
#+end_src

** =recentf=

Recentf is a minor mode that builds a list of recently opened files.
This list is is automatically saved across Emacs sessions.

Prefer saving the history of opened files somewhere other than the default.

#+begin_src emacs-lisp
(use-package recentf
  :init (recentf-mode 1)
  :custom
  (recentf-save-file "~/.emacs.d/etc/recentf")
  (recentf-max-saved-items 100))
#+end_src

** =savehist=

The history of prompts like =M-:= can be saved, but let's change its
save file and history length first. Also save search entries.

#+begin_src emacs-lisp
(setq savehist-additional-variables '(search-ring regexp-search-ring)
      savehist-file "~/.emacs.d/etc/savehist"
      history-length 150)
(savehist-mode 1)
#+end_src

** =save-place=

Remember position in a file.

#+begin_src emacs-lisp
(use-package saveplace
  :config
  (setq save-place-file (locate-user-emacs-file "etc/saveplace" ".emacs-places")
        save-place-forget-unreadable-files nil
        save-place-ignore-files-regexp "\\(?:COMMIT_EDITMSG\\|svn-commit\\.tmp\\|config\\.org\\)$")
  ;; activate it for all buffers
  (setq-default save-place t))
#+end_src

** =shell=

#+begin_src emacs-lisp
(use-package shell
  :bind (("C-x m" . shell)
         ("C-x M" . ansi-term))
  :hook (shell-mode . 'ansi-color-for-comint-mode-on))
#+end_src

** =simple=

#+begin_src emacs-lisp :tangle no
(use-package simple
  :diminish visual-line-mode
  :config
  ;; Display the column number in the mode line.
  (column-number-mode t))
#+end_src

** =smerge-mode=

#+begin_src emacs-lisp
(use-package smerge-mode
  :config
  (setq smerge-command-prefix "\C-cv"))
#+end_src

** =sql=

This configuration allows me to connect to predefined MySQL servers.

Save command history between sessions (taken from EmacsWiki).

#+begin_src emacs-lisp
(use-package sql
  :commands (nl/sql-connect-server)
  :hook
  (sql-interactive-mode . nl/sql-save-history-hook)
  :preface
  (defun nl/sql-save-history-hook ()
    (let ((lval 'sql-input-ring-file-name)
          (rval 'sql-product))
      (if (symbol-value rval)
          (let ((filename
                 (concat "~/.emacs.d/sql/"
                         (symbol-name (symbol-value rval))
                         "-history.sql")))
            (set (make-local-variable lval) filename))
        (error
         (format "SQL history will not be saved because %s is nil"
                 (symbol-name rval))))))
  :config
  (require 'epa-file)
  (epa-file-enable)

  (setq sql-connection-alist
        '((localhost.dev (sql-product 'mysql)
                         (sql-port 3306)
                         (sql-server "localhost")
                         (sql-user "root")
                         (sql-database "mysql"))))

  (defun nl/sql-connect (product connection)
    "Connects to a database server of type PRODUCT using the CONNECTION type."
    (require 'nl-passwords (concat user-emacs-directory "nl/password.el.gpg"))

    ;; update the password to the sql-connection-alist
    (let ((connection-info (assoc connection sql-connection-alist))
          (sql-password (car (last (assoc connection nl-sql-passwords)))))
      (delete sql-password connection-info)
      (nconc connection-info `((sql-password ,sql-password)))
      (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))
      (add-to-list 'sql-connection-alist connection-info))

    ;; connect to database
    (setq sql-product product)
    (if current-prefix-arg
        (sql-connect connection connection)
      (sql-connect connection)))

  (defun nl/sql-localhost-dev ()
    "Connects to the MySQL server running on machine 'localhost'."
    (nl/sql-connect 'mysql 'localhost.dev))

  (defun nl/sql-obelix-dev ()
    "Connects to the MySQL server running on machine 'obelix'."
    (nl/sql-connect 'mysql 'obelix.dev))

  (defvar nl/sql-servers-list
    '(("localhost dev" nl/sql-localhost-dev)
      ;;("Obelix Dev" nl/sql-obelix-dev)
      )
    "A list of server name and the function to connect.")

  (defun nl/sql-connect-server (func)
    "Connect to the input server using nl/sql-servers-list and FUNC."
    (interactive
     (helm-comp-read "Select server: " nl/sql-servers-list))
    (funcall func)))
#+end_src

** =subword-mode=

#+begin_src emacs-lisp
(use-package subword
  :diminish subword-mode)
#+end_src

** =tramp=

#+begin_src emacs-lisp
(use-package tramp
  :init (setq tramp-ssh-controlmaster-options nil)
  :config
  (let ((cert-path "~/.ssh/id_dsa")
        (ssh-methods '("ssh" "sshx"))))
  (setq tramp-terminal-type "dumb"
        tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*"
        vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp)))
#+end_src
** =term=

#+begin_src emacs-lisp
(use-package term
  :bind (("C-x M" . ansi-term)))
#+end_src

** =vc=

#+begin_src emacs-lisp
(use-package vc
  :config
  (setq vc-find-revision-no-save t))

(use-package vc-git
  :ensure nil
  :config
  (setq vc-git-diff-switches "--patch-with-stat")
  (setq vc-git-print-log-follow t))
#+end_src

** =windmove=

=windmove= provides useful commands for moving window focus by
direction.

#+begin_src emacs-lisp
(windmove-default-keybindings 'meta)
#+end_src

** =winner-mode=

Window management. ~C-c left (winner-undo)~ undoes the last window
configuration change. Redo the changes using ~C-c right
(winner-redo)~. Also move from window to window using Meta and the
direction keys.

#+begin_src emacs-lisp
(use-package winner
  :demand t
  :config
  (winner-mode))
#+end_src

** =whitespace=

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("S-<f10>" . whitespace-mode))
#+end_src

* Themes
** Current

Using doom themes

** [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]

#+begin_src emacs-lisp
(use-package doom-themes
  :demand
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-molokai t)

  ;;
  (set-face-attribute 'font-lock-comment-face nil :weight 'semi-bold :slant 'italic)
  (set-face-background 'region (doom-darken 'blue 0.2))

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )

(with-eval-after-load 'markdown-mode
  (set-face-foreground 'markdown-code-face (doom-darken 'green 0.2))
  (set-face-background 'markdown-code-face (doom-color 'brightblack))
  ;;(set-face-background 'org-block (doom-color 'brightblack))
  (set-face-attribute 'markdown-header-face
                      nil
                      :font nl/gui-variable-font-name
                      :weight 'bold
                      :height (* 12 (string-to-number nl/gui-current-variable-font-size)))
  (set-face-attribute 'markdown-link-face
                      nil
                      :font nl/gui-variable-font-name
                      :weight 'bold
                      :height (* 10 (string-to-number nl/gui-current-variable-font-size)))
  )
#+end_src

Loading themes (https://www.reddit.com/r/emacs/comments/fefwpw/show_your_themes/)

#+begin_src emacs-lisp
(defun ap/load-doom-theme (theme)
  "Disable active themes and load a Doom theme."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name)
                                                   (--select (string-prefix-p "doom-" it)))))))
  (ap/switch-theme theme))

(defun ap/switch-theme (theme)
  "Disable active themes and load THEME."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name))))))
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme theme 'no-confirm))
#+end_src

** Past
*** [[https://github.com/dracula/emacs/tree/62df5de68c73d34faaa0191a92ce3ebce589bf24][dracula-theme]]

#+begin_src emacs-lisp :tangle no
(use-package dracula-theme
  :disabled
  :config
  (load-theme 'dracula t)
  ;; default region color is too hard to see on my display
  :custom-face
  ;; (region ((t (:background "#0f3b82"))))
  (font-lock-warning-face ((t (:background "#0f3b82"))))
  (font-lock-negation-char-face ((nil :foreground "red" :background "#0f3b82")))
  (ediff-odd-diff-A ((nil :background "#862b27")))
  (ediff-even-diff-A ((nil :background "#1f772c")))
  (ediff-current-diff-A ((nil :background "#2b538a")))
  (ediff-odd-diff-B ((nil :background "#862b27")))
  (ediff-even-diff-B ((nil :background "#1f772c")))
  (ediff-current-diff-B ((nil :background "#2b538a")))
  (ediff-odd-diff-C ((nil :background "#862b27")))
  (ediff-even-diff-C ((nil :background "#1f772c")))
  (ediff-current-diff-C ((nil :background "#2b538a"))))
#+end_src

*** [[https://github.com/emacsfodder/emacs-bubbleberry-theme][bubbleberry-theme]]

Trying out Bubbleberry theme: 2019-02-25
Switched to Dracula theme: 2019-04-10

#+begin_src emacs-lisp :tangle no
(use-package bubbleberry-theme
  :custom-face
  ;; default region color is too hard to see on my display
  (region ((t (:background "#0f3b82"))))
  (font-lock-warning-face ((t (:background "#0f3b82"))))
  (font-lock-negation-char-face ((nil :foreground "red" :background "#0f3b82")))
  (ediff-odd-diff-A ((nil :background "#862b27")))
  (ediff-even-diff-A ((nil :background "#1f772c")))
  (ediff-current-diff-A ((nil :background "#2b538a")))
  (ediff-odd-diff-B ((nil :background "#862b27")))
  (ediff-even-diff-B ((nil :background "#1f772c")))
  (ediff-current-diff-B ((nil :background "#2b538a")))
  (ediff-odd-diff-C ((nil :background "#862b27")))
  (ediff-even-diff-C ((nil :background "#1f772c")))
  (ediff-current-diff-C ((nil :background "#2b538a"))))
:config
(load-theme 'bubbleberry t))
#+end_src

*** [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk-theme]]

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :config
  (load-theme 'cyberpunk t))
#+end_src

*** [[https://github.com/ogdenwebb/emacs-kaolin-themes][kaolin-themes]]

#+begin_src emacs-lisp :tangle no
(use-package kaolin-themes
  :config
  ;;(load-theme 'base16-solarized-dark t)
  (setq kaolin-wave t
        kaolin-hl-line-colored t)
  (load-theme 'kaolin-dark))
#+end_src

*** [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-emacs]]

TextMate like theme.

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :config
  (load-theme 'monokai t)
  (setq frame-background-mode `dark)
  (setq monokai-use-variable-pitch nil))
#+end_src

*** [[https://emacsthemes.com/themes/paganini-theme.html][paganini-theme]]

#+begin_src emacs-lisp :tangle no
(use-package paganini-theme
  :config
  (load-theme 'paganini t))
#+end_src

*** [[https://github.com/bbatsov/solarized-emacs][solarized-emacs]]

#+begin_src emacs-lisp :tangle no
(use-package solarized-theme
  :config
  (load-theme 'solarized-dark t))
#+end_src

*** [[https://github.com/TheSuspiciousWombat/SusColors-emacs][suscolors]]

Tried out new theme: 2019-08-04

#+begin_src emacs-lisp :tangle no
(use-package suscolors-theme
  :custom-face
  ;; '(region ((t (:background "#0f3b82"))))
  ;; '(font-lock-warning-face ((t (:background "#0f3b82"))))
  ;; '(font-lock-negation-char-face ((nil :foreground "red" :background "#0f3b82")))
  (vterm-color-black ((t (:foreground "#000000" :background "#777777"))))

  (ediff-odd-diff-A ((nil :background "#862b27")))
  (ediff-even-diff-A ((nil :background "#1f772c")))
  (ediff-current-diff-A ((nil :background "#2b538a")))
  (ediff-odd-diff-B ((nil :background "#862b27")))
  (ediff-even-diff-B ((nil :background "#1f772c")))
  (ediff-current-diff-B ((nil :background "#2b538a")))
  (ediff-odd-diff-C ((nil :background "#862b27")))
  (ediff-even-diff-C ((nil :background "#1f772c")))
  (ediff-current-diff-C ((nil :background "#2b538a"))))
:config
(load-theme 'suscolors t))
#+end_src

*** [[https://github.com/belak/base16-emacs][base16-emacs]]

One tweak to the base16-google-dark theme; the face for the mode line
buffer name is too hard to see,  set it to white instead.

Tried out 2020-01-20

#+begin_src emacs-lisp :tangle no
(use-package base16-theme
  :custom-face
  ;; (region ((t (:background "#0f3b82"))))
  ;; (font-lock-warning-face ((t (:background "#0f3b82"))))
  ;; (font-lock-negation-char-face ((nil :foreground "red" :background "#0f3b82")))
  (mode-line-buffer-id ((t :foreground "white")))
  (vterm-color-black ((t (:foreground "#000000" :background "#777777"))))

  (ediff-odd-diff-A ((nil :background "#862b27")))
  (ediff-even-diff-A ((nil :background "#1f772c")))
  (ediff-current-diff-A ((nil :background "#2b538a")))
  (ediff-odd-diff-B ((nil :background "#862b27")))
  (ediff-even-diff-B ((nil :background "#1f772c")))
  (ediff-current-diff-B ((nil :background "#2b538a")))
  (ediff-odd-diff-C ((nil :background "#862b27")))
  (ediff-even-diff-C ((nil :background "#1f772c")))
  (ediff-current-diff-C ((nil :background "#2b538a")))
  :config
  (load-theme 'base16-woodland t)
  ;;(load-theme 'base16-solarized-dark t)
  ;;(load-theme 'base16-oceanicnext t)
  ;;(load-theme 'base16-google-dark t)
  ;;(load-theme 'base16-nord t)
  )
#+end_src
*** [[https://github.com/fniessen/emacs-leuven-theme][emacs-leuven-theme]]

#+begin_src emacs-lisp :tangle no
(use-package leuven-theme
  :config
  (load-theme 'leuven-dark t)
  :custom-face
  (code-block ((nil :foreground "#ffff7f" :background "#25202a")))
  (code-inline ((nil :foreground "#ff9bff" :background "#25202a")))
  (dired-directory ((nil :background "#25202a")))
  (dired-header ((nil :background "#25202a" :foreground "SteelBlue3")))
  (flycheck-error ((nil :background "lawn green" :foreground "black")))
  (flycheck-warning ((nil :background "yellow" :foreground "black")))
  (org-block ((nil :foreground "#ffff7f" :background "#25202a" :extend t)))
  (org-block-begin-line ((nil :underline nil :foreground "#ffff7f" :background "#25202a")))
  (org-block-end-line ((nil :overline nil :foreground "#ffff7f" :background "#25202a")))
  (show-paren-match ((nil :background "#ffad65"))))
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** [[https://github.com/abo-abo/ace-window][ace-window]]

A package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

#+RESULTS:
: t
** [[https://github.com/Wilfred/ag.el][ag]]

Use silver surfer to search.

#+begin_src emacs-lisp
(use-package ag
  :commands ag)
#+end_src

** [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  ;; M-x all-the-icons-install-fonts
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** [[https://github.com/syohex/emacs-anzu][anzu]]

#+begin_src emacs-lisp
(use-package anzu
  :bind
  (([remap query-replace] . anzu-query-replace)
   ([remap query-replace-regexp] . anzu-query-replace-regexp))
  :custom
  (anzu-mode-lighter "")
  (anzu-deactivate-region t)
  (anzu-search-threshold 1000)
  (anzu-replace-threshold 50)
  (anzu-replace-to-string-separator " => ")
  :config
  (global-anzu-mode +1)
  (set-face-attribute 'anzu-mode-line nil :foreground "yellow" :weight 'bold))
#+end_src

** [[https://github.com/abo-abo/avy][avy]]

A quick way to jump around text in buffers.

#+begin_src emacs-lisp
(use-package avy
  :bind
  (("C-c SPC" . avy-goto-char-timer)
   ("C-'" . avy-goto-char)))
#+end_src

** [[https://github.com/Malabarba/beacon][beacon]]

Never lose your cursor again. Highlights the cursor.

#+begin_src emacs-lisp :tangle no
(use-package beacon
  :diminish beacon-mode
  :init
  (setq beacon-push-mark 35)
  (setq beacon-color "#666600")
  :config
  (beacon-mode 1))
#+end_src

** [[https://github.com/jorgenschaefer/circe][circe]]

#+begin_src emacs-lisp :tangle no
(use-package circe
  :config (setq circe-default-nick "chucho"
                circe-default-user "chucho"
                circe-default-realname "chucho"
                circe-default-part-message "Bye"
                circe-default-quit-message "Bye"
                circe-network-options '(("Freenode"
                                         :tls t
                                         :channels ("#emacs")
                                         ))))
#+end_src

** [[https://github.com/bburns/clipmon][clipmon]]

#+begin_src emacs-lisp
(use-package clipmon
  :commands clipmon-mode-start
  :bind ("M-S-<f2>" . clipmon-autoinsert-toggle)
  :config
  (clipmon-mode-start))
#+end_src

** [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]]

#+BEGIN_QUOTE
Color Identifiers is a minor mode for Emacs that highlights each source code identifier uniquely
based on its name.
#+END_QUOTE

Disable for now since it is slow when editing Scala code.

#+begin_src emacs-lisp :tangle no
(use-package color-identifiers-mode
  :diminish color-identifiers-mode
  :config
  (add-hook 'after-init-hook 'global-color-identifiers-mode)
  (set-face-attribute 'font-lock-comment-delimiter-face nil :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic))
#+end_src
** [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]]

#+begin_src emacs-lisp
(use-package column-enforce-mode
  :config
  (setq column-enforce-column 110)
  :hook (progmode-hook . column-enforce-mode))
#+end_src

** [[https://github.com/company-mode/company-mode][company-mode]]

Complete anything.

#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)
              ("M-/" . company-complete-common))
  :init (global-company-mode t)
  :custom
  (company-dabbrev-downcase nil "Don't downcase returned candidates.")
  (company-show-numbers t "Numbers are helpful.")
  (company-abort-manual-when-too-short t "Be less enthusiastic about completion.")
  :custom-face
  (company-tooltip ((t (:family "IBM Plex Mono Medium" :height 120))))
  :config

  (setq company-idle-delay 0              ;; no delay no autocomplete
        company-minimum-prefix-length 4
        company-tooltip-limit 20)
  )
#+end_src

** [[https://github.com/tumashu/company-posframe/][company-posframe]]

Removed due to not displaying properly with ~IBM Plex Mono~ font. 2021-02-16

#+begin_src emacs-lisp :tangle no
(use-package company-posframe
  :custom-face
  (company-posframe-active-backend-name ((t (:family "Fira Code Retina"))))
  :custom
  (company-posframe-font nl/gui-fixed-font-name)
  :config
  (company-posframe-mode 1))
#+end_src

** [[https://github.com/TommyX12/company-tabnine][company-tabnine]]

#+begin_src emacs-lisp :tangle no
(use-package company-tabnine
  :after company
  :config
  (add-to-list 'company-backends #'company-tabnine)
  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  (company-tng-configure-default)
  (setq company-frontends
        '(company-tng-frontend
          company-pseudo-tooltip-frontend
          company-echo-metadata-frontend)))
#+end_src
** [[https://github.com/twada/coverlay.el][coverlay.el]]

#+begin_src emacs-lisp :tangle no
(use-package coverlay
  :disabled
  :load-path "~/src/github/elisp/coverlay.el"
  :custom
  (coverlay:untested-line-background-color "#862b27")
  (coverlay:tested-line-background-color "#1f772c")
  (coverlay:mark-tested-lines nil))
#+end_src

** [[https://github.com/emacsmirror/emacswiki.org/blob/master/cursor-chg.el][cursor-chg]]

#+begin_src emacs-lisp
(use-package cursor-chg
  :load-path "lisp"
  :commands change-cursor-mode
  :config
  (change-cursor-mode 1)
  (toggle-cursor-type-when-idle 1))
#+end_src

This package was removed from MELPA since it was only found on Emacs Wiki.

** [[https://github.com/emacs-lsp/dap-mode][dap-mode]]

#+begin_src elisp
(use-package dap-mode
  :after lsp-mode
  ;;:hook (dap-stopped-hook . (lambda (arg) (call-interactively #'dap-hydra)))
  :config
  (dap-mode t)
  (dap-ui-mode t)
  (require 'dap-java))
#+end_src

** [[https://github.com/patrickt/emacs][deadgrep]]

#+begin_src emacs-lisp
(use-package deadgrep
  :bind (("C-c h" . deadgrep)))
#+end_src

** [[https://github.com/skeeto/devdocs-lookup][devdocs-lookup]]

#+begin_src emacs-lisp
(use-package devdocs)
#+end_src

** [[https://github.com/dgutov/diff-hl][diff-hl]]

Could not get this package to display changes (2017-10-15).

#+begin_src emacs-lisp :tangle no
(use-package diff-hl
  :init
  (add-hook 'prog-mode-hook #'diff-hl-mode)
  (add-hook 'org-mode-hook #'diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (setq diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-type)
  (setq diff-hl-margin-side 'left)
  (diff-hl-mode t))
#+end_src

** [[https://github.com/thamer/diredful][diredful]]

Provides a simple UI for customizing dired mode to use different faces and colors.

#+begin_src emacs-lisp
(use-package diredful
  :config (diredful-mode 1))
#+end_src
** [[https://github.com/Fuco1/dired-hacks][dired-narrow]]

#+begin_src emacs-lisp
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+end_src

** [[https://github.com/jojojames/dired-sidebar][dired-sidebar]]

#+begin_src emacs-lisp
(use-package dired-sidebar
  :bind (("C-c C-n" . dired-sidebar-toggle-sidebar))
  :commands (dired-sidebar-toggle-sidebar)
  :config
  (when (eq system-type 'windows-nt)
    (setq dired-sidebar-use-all-the-icons nil))

  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font nil)
  (setq dired-sidebar-face
        (cond
         ((eq system-type 'darwin)
          '(:family "Helvetica" :height 100))
         (:default
          '(:family "Arial" :height 90)))))
#+end_src
** [[https://github.com/Silex/docker.el][docker]]

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

#+RESULTS:
: docker

** [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom-face
  (doom-modeline-project-parent-dir ((t (:foreground "#0f3b82"))))
  :config
  (setq doom-modeline-buffer-file-name-style 'buffer-name
        doom-modeline-height 20
        doom-modeline-bar-width 3))
#+end_src

** [[https://github.com/jacktasia/dumb-jump/blob/master/README.md][dumb-jump]]

#+BEGIN_QUOTE
Dumb Jump is an Emacs "jump to definition" package with support for
multiple programming languages that favors "just working". This means
minimal -- and ideally zero -- configuration with absolutely no stored
indexes (TAGS) or persistent background processes.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy
                dumb-jump-prefer-searcher 'ag))
#+end_src

** [[https://github.com/leoliu/easy-kill][easy-kill]]

#+begin_src emacs-lisp
(use-package easy-kill
  :pin melpa
  :config
  (global-set-key [remap kill-ring-save] #'easy-kill)
  (global-set-key [remap mark-sexp] #'easy-mark))
#+end_src

** [[https://github.com/editorconfig/editorconfig-emacs][editor-config]]

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

** [[https://github.com/joaotavora/eglot][eglot]]

#+begin_src emacs-lisp :tangle no
(use-package eglot
  :config
  (use-package typescript-mode)
  (add-hook 'typescript-mode-hook 'eglot-ensure))
#+end_src

** [[https://github.com/syohex/emacs-git-gutter][emacs-git-gutter]]

#+begin_src emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode
  :hook (prog-mode . git-gutter-mode))
#+end_src

** [[https://github.com/lbolla/emacs-flycheck-flow][emacs-flycheck-flow]]

This package adds support for flow to flycheck.

#+begin_src emacs-lisp :tangle no
(use-package flycheck-flow
  :hook (js2-mode . flycheck-mode))
#+end_src

** [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]

#+begin_src emacs-lisp
(when (file-directory-p "~/src/github/elisp/emacs-libvterm")
  (use-package vterm
    :load-path "~/src/github/elisp/emacs-libvterm"
    :bind
    (:map vterm-mode-map
          ("M-<right>" . windmove-right)
          ("M-<left>" . windmove-left)
          ("M-<up>" . windmove-up)
          ("M-<down>" . windmove-down))
    :commands vterm vterm-other-window
    :config
    (setq vterm-max-scrollback 10000)))

#+end_src

** [[https://github.com/chrisbarrett/emacs-refactor][emacs-refactor]]

#+begin_src emacs-lisp
(use-package emr
  :bind (:map prog-mode-map
              ("M-RET" . emr-show-refactor-menu))
  :config (emr-initialize))
#+end_src

** [[https://github.com/abingham/emacs-ycmd][emacs-ycmd]]

#+begin_src emacs-lisp :tangle no
(use-package ycmd
  :disabled
  :preface
  (setq ycmd-startup-timeout 10)
  (defun ycmd-setup-completion-at-point-function ()
    "Setup `completion-at-point-functions' for `ycmd-mode'."
    (add-hook 'completion-at-point-functions
              #'ycmd-complete-at-point nil :local))

  :config
  (set-variable 'ycmd-server-command `("python" ,(file-truename "~/src/github/devtools/ycmd/ycmd")))
  ;;(set-variable 'ycmd-global-config (expand-file-name "~/path/to/ycmd/ycm_conf.py"))

  (use-package company-ycmd
    :config
    (company-ycmd-setup))
  (use-package flycheck-ycmd
    :config
    (flycheck-ycmd-setup))
  (use-package ycmd-eldoc
    :hook (ycmd-mode . ycmd-eldoc-setup))
  :hook ((js2-mode  .ycmd-mode)
         ( ycmd-mod-hook . ycmd-setup-completion-at-point-function)))
#+end_src

** [[https://melpa.org/#/etags-select][etags-select]]

#+BEGIN_QUOTE
Open a buffer with file/lines of exact-match tags shown. Select one by
going to a line and pressing return. pop-tag-mark still works with
this code.
#+END_QUOTE

#+begin_src emacs-lisp :tangle no
(use-package etags-select
  :config
  (global-set-key "\M-?" 'etags-select-find-tag-at-point)
  (global-set-key "\M-." 'etags-select-find-tag))
#+end_src

** [[https://github.com/magnars/expand-region.el][expand-region]]

#+begin_src emacs-lisp
(use-package expand-region
  ;; :load-path (lambda () (expand-file-name "~/src/github/elisp/expand-region.el"))
  :bind ("C-=" . er/expand-region)
  :config
  (setq expand-region-smart-cursor t
        er/enable-subword-mode? nil))
#+end_src

** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]

#+begin_src emacs-lisp
(use-package eyebrowse
  :config
  (eyebrowse-mode t))
#+end_src

** [[https://github.com/lastquestion/explain-pause-mode][explain-pause-mode]]

#+begin_src emacs-lisp :tangle no
(use-package explain-pause-mode
  :load-path "~/src/github/elisp/explain-pause-mode"
  :config
  (explain-pause-mode t))
#+end_src

** [[http://www.emacswiki.org/emacs/fic-mode.el][fic-mode]]

Show FIXME/TODO/BUG/KLUDGE in special face only in comments and
strings.

#+begin_src emacs-lisp
(use-package fic-mode
  :commands fic-mode
  :hook ((c++-mode    . fic-mode)
         (c-mode      . fic-mode)
         (java-mode   . fic-mode)
         (vala-mode   . fic-mode)
         (python-mode . fic-mode)
         (php-mode    . fic-mode)
         (scala-mode  . fic-mode)))
#+end_src

** [[https://www.emacswiki.org/emacs/framemove.el][framemove]]

Allow windmove to jump between frames.

#+begin_src emacs-lisp
(use-package framemove
  :defer 0
  :load-path "lisp"
  :config
  (setq framemove-hook-into-windmove t))
#+end_src

** [[https://github.com/flycheck/flycheck][flycheck]]

#+begin_src emacs-lisp
(use-package flycheck
  :commands global-flycheck-mode
  :diminish flycheck-mode
  :commands flycheck-define-checker
  :init (global-flycheck-mode)
  :config
  (setq flycheck-standard-error-navigation nil)

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  (setq flycheck-checkers (append flycheck-checkers
                                  '(javascript-eslint)))
  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'js-mode))
#+end_src

** [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]]

#+begin_src emacs-lisp
(use-package flycheck-pos-tip
  :after flycheck
  :custom-face
  ;;  (popup-face ((t (:inherit default :height 200))))
  ;;  (popup-tip-face ((t (:inherit default :height 200)))))
  :config
  (flycheck-pos-tip-mode)
  (setq flycheck-pos-tip-timeout 10
        x-gtk-use-system-tooltips nil
        pos-tip-foreground-color "tomato"
        pos-tip-background-color "gray20"))
#+end_src

** [[https://github.com/mola-T/flymd][flymd]]

On the fly markdown preview.

#+begin_src emacs-lisp
(use-package flymd
  :commands (flymd-flyit)
  :preface
  (defun nl/flymd-browser-function (url)
    (let ((browse-url-browser-function 'browse-url-firefox))
      (browse-url url)))
  :config
  (setq flymd-browser-open-function 'nl/flymd-browser-function))
#+end_src

** [[https://github.com/waymondo/frog-jump-buffer][frog-jump-buffer]]

#+begin_src emacs-lisp :tangle no
(use-package frog-jump-buffer
  :load-path "~/src/github/elisp/frog-jump-buffer"
  :bind
  ("C-x C-b" . frog-jump-buffer)
  :commands frog-jump-buffer)
#+end_src

** [[https://github.com/bling/fzf.el][fzf]]

This package uses ido-mode which I don't want to install.

#+begin_src emacs-lisp :tangle no
(use-package fzf)
#+end_src

** [[https://github.com/leoliu/ggtags][ggtags]]

Generate tags on command line with ~gtags~.
Updte tags on command line with ~global -u~.

#+begin_src emacs-lisp :tangle no
(use-package ggtags
  :commands ggtags-mode)
#+end_src

** [[https://github.com/jimhourihan/glsl-mode][glsl-mode]]

Emacs major mode for OpenGL shading language.

#+begin_src emacs-lisp
(use-package glsl-mode
  :mode "\\.\\(vert\\|frag\\|glsl\\|geom\\)$")
#+end_src

** [[https://github.com/camdez/goto-last-change.el][goto-last-change]]

#+begin_src emacs-lisp
(use-package goto-last-change
  :bind
  ("C-x C-\\" . goto-last-change)
  :config
  (autoload 'goto-last-change "goto-last-change"
    "Set point to the position of the last change." t))
#+end_src

** [[https://github.com/roman/golden-ratio.el][golden-ratio]]

#+BEGIN_QUOTE
When working with many windows at the same time, each window has a size that is not convenient for editing.
#+END_QUOTE

Disable for now, not working the way I prefer.

#+begin_src emacs-lisp :tangle no
(use-package golden-ratio
  :config
  (golden-ratio-mode 1))
#+end_src

** [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][groovy-mode]]

Required for gradle build files.

#+begin_src emacs-lisp :tangle no
(use-package groovy-mode
#+end_src

** [[*][grunt]]

#+begin_src emacs-lisp :tangle no
(use-package grunt)
#+end_src

** [[https://github.com/kai2nenobu/guide-key][guide-key]]

Guide the following key bindings automatically and dynamically.

#+begin_src emacs-lisp
(use-package guide-key
  :diminish guide-key-mode
  :config
  (setq guide-key/guide-key-sequence '("C-x r" "C-c p" "C-h" "C-c h" "C-c l")
        guide-key/recursive-key-sequence-flag t)
  (guide-key-mode 1))
#+end_src

** [[https://github.com/abo-abo/headlong][headlong]]

#+begin_src emacs-lisp :tangle no
(use-package headlong)
#+end_src

** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

#+BEGIN_QUOTE
This minor mode highlights indentation levels via =font-lock=.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character)
  (set-face-foreground 'highlight-indent-guides-character-face "gray18")
  :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

** [[https://github.com/boyw165/hl-anything][hl-anything]]

Not used for now since it breaks ERC font lock.

#+begin_src emacs-lisp :tangle no
(use-package hl-anything
  :config
  (hl-highlight-mode 1)
  ;; (hl-setup-default-advices nil)
  ;; (hl-setup-customizable-advices nil)
  ;; (remove-hook 'kill-emacs-hook 'hl-save-highlights)
  )
#+end_src

** [[https://github.com/nflath/hungry-delete][hungry-delete]]

So that hungry deletion can be used in all modes.

#+begin_src emacs-lisp
(use-package hungry-delete
  :diminish hungry-delete-mode
  :init
  (global-hungry-delete-mode))
#+end_src

** [[https://github.com/abo-abo/hydra][hydra]]

This package can be used to tie related commands into a family of
short bindings with a common prefix - a Hydra.

#+begin_src emacs-lisp
(use-package hydra
  :pin melpa
  :init
  (use-package cl-lib)
  (use-package lv)
  (use-package key-chord
    :init
    (setq key-chord-one-key-delay 0.16)
    :config (key-chord-mode 1))
  :custom
  (hydra-hint-display-type 'posframe)
  :config
  ;;(setq hydra-posframe-show-params (plist-put hydra-posframe-show-params :font "Fira Code Retina"))
  (setq hydra-posframe-show-params
        (plist-put hydra-posframe-show-params :font nl/gui-fixed-font-name))
  (defun nl/pull-window ()
    "Pull a window to the window the point is at"
    (interactive)
    (aw--push-window (selected-window))
    (ace-swap-window)
    (aw-flip-window))

  (defun nl/open-buffer-in-other-window ()
    "Open buffer in another window."
    (interactive)
    (let ((pt (point))
          (buf (current-buffer))
          (window (ace-select-window)))
      (set-window-buffer window buf)
      (goto-char pt)
      (recenter-top-bottom 'top)))

  ;; http://oremacs.com/2015/01/29/more-hydra-goodness/

  (defun hydra-universal-argument (arg)
    (interactive "P")
    (setq prefix-arg (if (consp arg)
                         (list (* 4 (car arg)))
                       (if (eq arg '-)
                           (list -4)
                         '(4)))))

  (defhydra hydra-window (:color red :hint nil)
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("|" (progn (split-window-right) (windmove-right)))
    ("_" (progn (split-window-below) (windmove-down)))
    ("v" split-window-right)
    ("x" split-window-below)
    ("u" winner-undo)
    ("r" winner-redo) ;;Fixme, not working?
    ("a" ace-window :exit t)
    ("f" new-frame :exit t)
    ("o" nl/open-buffer-in-other-window :exit t)
    ("p" nl/pull-window :exit t)
    ("s" ace-swap-window :exit t)
    ("da" ace-delete-window)
    ("dw" delete-window)
    ("db" kill-this-buffer)
    ("df" delete-frame :exit t)
    ("q" nil)
    ;;("i" ace-maximize-window "ace-one" :color blue)
    ("m" headlong-bookmark-jump))

  (key-chord-define-global "yy" 'hydra-window/body)

  (defhydra hydra-buffer (:color blue :columns 3)
    ("n" next-buffer "next" :color red)
    ("b" helm-mini "switch")
    ("B" ibuffer "ibuffer")
    ("p" previous-buffer "prev" :color red)
    ("C-b" buffer-menu "buffer menu")
    ("d" kill-this-buffer "delete" :color red)
    ;; don't come back to previous buffer after delete
    ("D" (progn (kill-this-buffer) (next-buffer)) "Delete" :color red)
    ("s" save-buffer "save" :color red))

  (key-chord-define-global "zz" 'hydra-buffer/body)

  (defhydra hydra-goto-line (goto-map "")
    "goto-line"
    ("g" goto-line "go")
    ("m" set-mark-command "mark" :bind nil)
    ("q" nil "quit"))

  (global-set-key (kbd "M-g M-g") 'hydra-goto-line/body)

  (defhydra hydra-windows-nav (:color red)
    ("s" shrink-window-horizontally "shrink horizontally" :column "Sizing")
    ("e" enlarge-window-horizontally "enlarge horizontally")
    ("b" balance-windows "balance window height")
    ("m" maximize-window "maximize current window")
    ("M" minimize-window "minimize current window")

    ("h" split-window-below "split horizontally" :column "Split management")
    ("v" split-window-right "split vertically")
    ("d" delete-window "delete current window")
    ("x" delete-other-windows "delete-other-windows")


    ("z" ace-window "ace window" :color blue :column "Navigation")
    ("h" windmove-left "← window")
    ("j" windmove-down "↓ window")
    ("k" windmove-up "↑ window")
    ("l" windmove-right "→ window")
    ("r" toggle-window-split "rotate windows") ; Located in utility functions
    ("q" nil "quit menu" :color blue :column nil))

  (global-set-key (kbd "C-c w") 'hydra-windows-nav/body))
#+end_src

** [[https://github.com/netguy204/imp.el][impatient-mode]]

impatient-mode is a minor mode that publishes the live buffer through
the local simple-httpd server under /imp/live/<buffer-name>/.

Works slow, so disabling. 2021-02-17

#+begin_src emacs-lisp  :tangle no
(use-package impatient-mode)
#+end_src

** [[https://github.com/mkcms/interactive-align][ialign]]

Emacs package that provides visual version of align-regexp command.

Have never used it: disabling. 2021-02-23

#+begin_src emacs-lisp :tangle no
(use-package ialign
  :bind ("C-x l" . ialign))
#+end_src

** [[https://github.com/purcell/ibuffer-projectile][ibuffer-projectile]]

#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :after (ibuffer projectile)
  :config
  (defun nl/ibuffer-customization ()
    "My customization for `ibuffer'."
    ;; ibuffer-projectile setup
    (ibuffer-projectile-set-filter-groups)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic) ; first do alphabetic sort
      (ibuffer-do-sort-by-major-mode)))  ; then do major-mode sort
  :hook (ibuffer-mode . nl/ibuffer-customization))
#+end_src

** [[https://github.com/abo-abo/swiper][ivy]]

#+begin_src emacs-lisp
(use-package ivy
  :diminish (ivy-mode . "")
  :bind (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)
         ("<f6>" . ivy-resume)
         :map ivy-mode-map
         ("C-'" . ivy-avy))
  :custom-face
  (ivy-current-match ((nil :background "#574a40")))
  (ivy-minibuffer-match-face-2 ((nil :background "#574a40")))
  (ivy-posframe-cursor ((nil :background "#be6119")))
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq
   ivy-use-virtual-buffers t
   ivy-wrap t
   ;; number of result lines to display
   ivy-height 10
   ;; does not count candidates
   ivy-count-format ""
   ;; no regexp by default
   ivy-initial-inputs-alist nil
   ;; configure regexp engine.
   ivy-re-builders-alist ;; allow input not in order
   '((t . ivy--regex-ignore-order))))

(use-package ivy-hydra
  :after (ivy hydra))
#+end_src

*** [[https://github.com/abo-abo/swiper][swiper]]

This blog post has a lot of info: [[http://oremacs.com/2016/04/26/ivy-0.8.0/][Ivy 0.8.0 is out]]

#+begin_src emacs-lisp
(use-package swiper
  :config
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-use-virtual-buffers t)
  (setq swiper-action-recenter t))
#+end_src

Also, install counsel:

See this article for recentering: [[http://manuel-uberti.github.io/emacs/2016/05/30/swiperrecenter/][Recentre the buffer when leaving Swiper]].

#+begin_src emacs-lisp
(use-package counsel
  :bind (;;("C-x C-f" . counsel-find-file)
         ;;("M-y" . counsel-yank-pop)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("C-c s a" . counsel-ag))
  :config
  (setq counsel-grep-base-command
        "rg -i -M 120 --no-heading --line-number --color never '%s' %s"))
#+end_src

When using =counsel-ag=:
- use ~C-c C-o~ (=ivy-occur=) to save results to a buffer,
- use ~C-x C-q~ (=ivy-wgrep-change-to-wgrep-mode=) to edit the buffer,
- use ~C-x C-s~ to save the changes, or
- use ~C-c C-k~ to abort all changes

** [[https://github.com/tumashu/ivy-posframe][ivy-posframe]]

#+begin_src emacs-lisp
(use-package ivy-posframe
  :after ivy
  :init (ivy-posframe-mode 1)
  :custom
  (ivy-posframe-font "Fira Code Retina")
  :custom-face
  ;;(ivy-posframe ((t :foreground "#ffffff" :background "#2d2e2e")))
  :config
  (setq ivy-posframe-display-functions-alist
        '((swiper          . ivy-posframe-display-at-frame-bottom-window-center)
          (complete-symbol . ivy-posframe-display-at-point)
          (counsel-fzf     . ivy-posframe-display-at-point)
          (counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
          (t               . ivy-posframe-display)))
  )
#+end_src

** [[https://github.com/tonini/karma.el][karma]]

Disabled since Jest is being used. 2019-10-11

#+begin_src emacs-lisp
(use-package karma
  :disabled
  :commands karma-mode)
#+end_src

** [[https://github.com/jschaf/emacs-lorem-ipsum][lorem-ipsum]]

Add filler lorem ipsum text to Emacs.

#+begin_src emacs-lisp
(use-package lorem-ipsum)
#+end_src

** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

#+begin_src emacs-lisp
(use-package lsp-mode
  :pin melpa
  :commands (lsp lsp-deferred)
  :hook
  (typescript-mode . lsp)
  (scala-mode . lsp)
  (php-mode . lsp)
  (python-mode . lsp)
  :custom
  (lsp-keymap-prefix "C-c l")
  (lsp-ui-flycheck-enable nil)
  (lsp-enable-snippet t)
  (lsp-enable-file-watchers nil)
  ;;(setq lsp-response-timeout 25)
  :config
  (setq lsp-prefer-capf t
        lsp-idle-delay 0.5
        lsp-pyls-plugins-flake8-enabled t)
  (setq lsp-clients-angular-language-server-command
        '("node"
          "/home/nelson/.nvm/versions/node/v14.4.0/lib/node_modules/@angular/language-server"
          "--ngProbeLocations"
          "/home/nelson/.nvm/versions/node/v14.4.0/lib/node_modules"
          "--tsProbeLocations"
          "/home/nelson/.nvm/versions/node/v14.4.0/lib/node_modules"
          "--stdio"))
  (lsp-register-custom-settings
   '(("pyls.plugins.pyls_mypy.enabled" t t)
     ("pyls.plugins.pyls_mypy.live_mode" nil t)
     ("pyls.plugins.pyls_black.enabled" t t)
     ("pyls.plugins.pyls_isort.enabled" t t))))

(use-package lsp-ui
  ;; :load-path "~/src/github/elisp/lsp-ui"
  :hook
  (lsp-mode . lsp-ui-mode)
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ([f10] . lsp-ui-sideline-toggle-symbols-info))
  :custom-face
  (lsp-ui-peek-peek ((nil :background "#2b538a")))
  :config
  (setq lsp-ui-peek-always-show nil):custom
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-doc-enable nil)
  (lsp-ui-peek-enable nil))
#+end_src

** [[https://github.com/joddie/macrostep][macrostep]]

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep)
#+end_src

** [[https://github.com/defunkt/markdown-mode][markdown-mode]]

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :hook
  (markdown-mode . (lambda () (auto-fill-mode -1)))
  (markdown-mode . variable-pitch-mode)
  (markdown-mode . flyspell-mode)
  :init
  (setq markdown-command "pandoc")
  :config
  (dolist (face '(markdown-inline-code-face markdown-code-face))
    (set-face-attribute face nil :inherit 'fixed-pitch)))
#+end_src

** [[https://github.com/ancane/markdown-preview-mode][markdown-preview-mode]]

#+begin_src emacs-lisp
(use-package markdown-preview-mode
  :config
  ;;(add-to-list 'markdown-preview-stylesheets
  ;;             "https://raw.githubusercontent.com/richleland/pygments-css/master/emacs.css")
  (setq markdown-preview-stylesheets (list
                                      "http://thomasf.github.io/solarized-css/solarized-light.min.css")))
#+end_src

** [[https://github.com/joostkremers/nswbuff][nswbuff]]

Quick switching between buffers.

#+begin_src emacs-lisp
(use-package nswbuff
  :bind* (("<C-tab>"           . nswbuff-switch-to-next-buffer)
          ("<C-S-iso-lefttab>" . nswbuff-switch-to-previous-buffer))
  :config (setq nswbuff-buffer-list-function #'nswbuff-projectile-buffer-list
                nswbuff-display-intermediate-buffers t
                nswbuff-exclude-buffer-regexps '("^ .*" "^\\*.*\\*")))
#+end_src

** [[https://github.com/openscad/openscad/tree/ba38885dcae54336c85bec0ca4ac2a5e7d038bbe][openscad]]

#+begin_src emacs-lisp
(use-package scad-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.scad$" . scad-mode)))
#+end_src

** [[https://github.com/sabof/org-bullets][org-bullets]]

#+BEGIN_QUOTE
Show org-mode bullets as UTF-8 characters.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

** [[https://github.com/astahlman/ob-async][ob-async]]

#+begin_src emacs-lisp
(use-package ob-async
  :after org)
#+end_src

** [[https://github.com/Silex/package-utils][package-utils]]

#+begin_src  emacs-lisp
(use-package package-utils)
#+end_src

** [[https://github.com/politza/pdf-tools][pdf-tools]]

#+begin_src emacs-lisp :tangle no
(pdf-tools-install)
#+end_src

** [[https://github.com/nex3/perspective-el][perspective]]

This package provides tagged workspaces.

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :config (persp-mode))
#+end_src

** [[https://github.com/bbatsov/projectile][projectile]]

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE


#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init (projectile-mode +1)
  :config
  ;; tramp-fix: https://github.com/syl20bnr/spacemacs/issues/11381
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))

  (setq projectile-indexing-method 'alien
        projectile-remember-window-configs nil
        projectile-switch-project-action 'projectile-dired
        projectile-completion-system 'helm
        projectile-enable-caching nil
        projectile-create-missing-test-files t
        projectile-mode-line "Projectile")

  (def-projectile-commander-method ?d
    "Open project root in dired."
    (projectile-dired)))
#+end_src

** [[https://github.com/google/protobuf][protobuf]]

2019-09-20 This package does not work with Emacs 27

#+begin_src emacs-lisp :tangle no
(use-package protobuf-mode
  :config
  (defconst nl/protobuf-style
    '((c-basic-offset . 2)
      (indent-tabs-mode . nil)))
  :hook (protobuf-mode . (lambda ()
                           (c-add-style "nl/style" nl/protobuf-style t)
                           (subword-mode 1))))
#+end_src

** [[https://github.com/tumashu/posframe][posframe]]

#+begin_src emacs-lisp
(use-package posframe
  :pin melpa
  :init
  (setq x-gtk-resize-child-frames 'resize-mode))
#+end_src

** [[https://github.com/milkypostman/powerline][powerline]]

#+begin_src emacs-lisp :tangle no
(use-package powerline
  :custom-face
  (mode-line ((t (:foreground "#030303" :background "#6b6b6b" :box nil))))
  (mode-line-inactive ((t (:foreground "#f9f9f9" :background "#6b6b6b" :box nil))))

  :config
  (setq powerline-arrow-shape 'arrow14)
  (setq powerline-default-separator-dir '(right . left))

  (setq powerline-color1 "#49483E")
  (setq powerline-color2 "#333333")
  (powerline-default-theme))
#+end_src

** [[https://github.com/bmag/helm-purpose][purpose]]

#+begin_src emacs-lisp :tangle no
(use-package window-purpose
  :commands purpose-mode
  :config
  (add-to-list 'purpose-user-mode-purposes '(scala-mode . scala))
  (add-to-list 'purpose-user-mode-purposes '(sbt-mode . scala))
  (purpose-compile-user-configuration))
#+end_src

** revive

Using revive

- use ~M-x save-current-configuration~ to save window configuration.
- use ~M-x resume~ to load window configuration.

This package was removed from Melpa on 2017-07-31 due to the author not wanting to
specify a lincence.

#+begin_src emacs-lisp
(use-package revive
  :load-path "lisp"
  :init
  (autoload 'save-current-configuration "revive" "Save status" t)
  (autoload 'resume "revive" "Resume Emacs" t)
  (autoload 'wipe "revive" "Wipe Emacs" t))
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Highlight brackets according to their depth

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** [[https://github.com/fgallina/region-bindings-mode][region-bindings-mode]]

Disable for now since causing issues when I use region expand and want
to overwrite.

#+begin_src emacs-lisp :tangle no
(use-package region-bindings-mode
  :config
  (region-bindings-mode-enable)
  (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
  (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
  (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
  (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
  (define-key region-bindings-mode-map "q" 'anzu-query-replace-regexp)
  ;;(define-key region-bindings-mode-map "w" 'whole-line-or-region-kill-ring-save)
  )
#+end_src

** [[https://github.com/nlamirault/ripgrep.el][ripgrep]]

#+begin_src emacs-lisp
(use-package ripgrep)
#+end_src

** [[https://github.com/ieure/scratch-el][scratch]]

Convenient package to create =*scratch*= buffers that are based on the current buffer's major mode.
This is more convienent than manually creating a buffer to do some scratch work or reusing the
initial =*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch)
#+end_src

** [[https://github.com/Kungsgeten/selected.el][selected]]

#+begin_src emacs-lisp
(use-package selected
  :diminish selected-minor-mode
  ;; :bind (:map selected-keymap
  ;;            ("M-%" . query-replace-regexp)
  ;;            ("C-[" . align-entire)
  ;;            ("C-f" . fill-region)
  ;;            ("C-U" . unfill-region)
  ;;            ("C-d" . downcase-region)
  ;;            ("C-r" . reverse-region)
  ;;            ("C-s" . sort-lines)
  ;;            ("C-u" . upcase-region))
  :init (selected-global-mode 1))
#+end_src

** [[https://github.com/wasamasa/shackle][shackle]]

#+BEGIN_QUOTE
Declarative popup window rules.
#+END_QUOTE

#+begin_src emacs-lisp :tangle no
(use-package shackle
  :config
  (setq shackle-rules
        '(("*Help*" :align t :ratio 0.4 :select t)
          ("\\`\\*[Hh]elm.*?\\*\\'" :regexp t :align 'bottom :ratio 0.4)
          ("\\*sbt\\*.*" :regexp t :other t)
          ;;(compilation-mode :popup t)
          (("*shell*" "*eshell*") :popup t))
        shackle-default-rule '(:select t)
        shackle-inhibit-window-quit-on-same-windows t)
  (shackle-mode))
#+end_src

** [[https://github.com/Fuco1/smartparens][smartparens]]

#+begin_src emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :config
  (require 'smartparens-config)
  ;; https://github.com/Fuco1/smartparens/issues/783
  (setq sp-escape-quotes-after-insert nil)

  ;; Set up some pairings for org mode markup. These pairings won't
  ;; activate by default; they'll only apply for wrapping regions.
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))

  ;; https://emacs.stackexchange.com/questions/26912/smartparens-do-not-insert-parenthesis-pair-when-point-is-at-the-beginning-of-wo
  (sp-pair "{" nil :unless '(sp-point-before-word-p))
  (sp-pair "(" nil :unless '(sp-point-before-word-p))
  (sp-pair "[" nil :unless '(sp-point-before-word-p))

  (sp-local-pair 'typescript-mode "\<" "\>"))
#+end_src

** [[https://github.com/mickeynp/smart-scan][smart-scan]]

Not really using this: disabling. 2021-02-28

Quickly jumps between other symbols found at point in Emacs.
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer

#+begin_src emacs-lisp :tangle no
(use-package smartscan
  :init (global-smartscan-mode 1))
#+end_src

** [[https://github.com/jbondeson/smooth-scrolling][smooth-scrolling]]

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :config (setq smooth-scroll-margin 6))
#+end_src

** [[https://github.com/TheBB/spaceline][spaceline]]

#+begin_src emacs-lisp :tangle no
(use-package spaceline-config
  :after spaceline
  :init
  (require 'spaceline-config)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified)
  (setq-default powerline-default-separator 'wave
                powerline-height 26
                spaceline-separator-dir-left '(left . left)
                spaceline-separator-dir-right '(right . right))
  :config
  (spaceline-helm-mode 1)
  (spaceline-toggle-version-control-on)

  (spaceline-compile
   ;; left side
   '(((projectile-root buffer-modified) :face 'avy-lead-face-1 :priority 100)
     ((remote-host buffer-id) :face 'avy-lead-face-0 :priority 100)
     ((line column) :separator ":" :face default-face :priority 100)
     (anzu :priority 95)
     auto-compile
     (process :when active)
     (minor-modes :when active
                  :priority 9)
     (org-clock :when active))
   ;; right side
   '(which-function
     (selection-info :priority 95)
     input-method
     (version-control :when active :priority 78)
     ((flycheck-error flycheck-warning flycheck-info) :when active :priority 89)
     (major-mode :priority 79)
     (minor-mode :priority 79 :face other-face)
     (global :when active)
     (buffer-position :priority 99)
     (hud :priority 99)))

  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))
#+end_src

** [[https://github.com/bbatsov/super-save][super-save]]

#+BEGIN_QUOTE
super-save auto-saves your buffers, when certain events happen - e.g.
you switch between buffers, an Emacs frame loses focus, etc. You can
think of it as both something that augments and replaces the standard
=auto-save-mode=.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package super-save
  :diminish super-save-mode
  :config (super-save-mode +1))
#+end_src

** [[https://github.com/Alexander-Miller/treemacs][treemacs]]

#+begin_src emacs-lisp
(use-package treemacs
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  :config
  (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay      0.5
        treemacs-directory-name-transformer    #'identity
        treemacs-display-in-side-window        t
        treemacs-eldoc-display                 t
        treemacs-file-event-delay              5000
        treemacs-file-extension-regex          treemacs-last-period-regex-value
        treemacs-file-follow-delay             0.2
        treemacs-file-name-transformer         #'identity
        treemacs-follow-after-init             t
        treemacs-git-command-pipe              ""
        treemacs-goto-tag-strategy             'refetch-index
        treemacs-indentation                   2
        treemacs-indentation-string            " "
        treemacs-is-never-other-window         nil
        treemacs-max-git-entries               5000
        treemacs-missing-project-action        'ask
        treemacs-move-forward-on-expand        nil
        treemacs-no-png-images                 nil
        treemacs-no-delete-other-windows       t
        treemacs-project-follow-cleanup        nil
        treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                      'left
        treemacs-recenter-distance             0.1
        treemacs-recenter-after-file-follow    nil
        treemacs-recenter-after-tag-follow     nil
        treemacs-recenter-after-project-jump   'always
        treemacs-recenter-after-project-expand 'on-distance
        treemacs-show-cursor                   nil
        treemacs-show-hidden-files             t
        treemacs-silent-filewatch              nil
        treemacs-silent-refresh                nil
        treemacs-sorting                       'alphabetic-asc
        treemacs-space-between-root-nodes      t
        treemacs-tag-follow-cleanup            t
        treemacs-tag-follow-delay              1.5
        treemacs-user-mode-line-format         nil
        treemacs-width                         35)

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))
  )

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** [[https://melpa.org/#/transpose-frame][transpose-frame]]

Allows for transposing window arrangements.

#+begin_src emacs-lisp :tangle no
(use-package transpose-frame
  :bind ("S-M-t" . transpose-frame))
#+end_src

** [[http://melpa.org/#/undo-tree][undo-tree]]

#+begin_src emacs-lisp :tangle no
(use-package undo-tree
  :commands global-undo-tree-mode)
#+end_src

** [[https://github.com/mrkkrp/vimish-fold][vimish-fold]]

#+begin_src emacs-lisp :tangle no
(use-package vimish-fold
  :config (vimish-fold-global-mode 1)
  )
#+end_src

** [[https://github.com/joodland/bm][visible-bookmarks]]

Provides visible, buffer local, bookmarks and the ability to jump
forward and backward to the next bookmark.

#+begin_src emacs-lisp
(use-package bm
  :bind ("C-<f4>" . bm-toggle)
  ("A-<f4>" . bm-next)
  ("S-<f4>" . bm-previous))
#+end_src

** [[https://github.com/benma/visual-regexp.el][visual-regexp]]

visual-regexp for Emacs is like replace-regexp, but with live visual
feedback directly in the buffer.

visual-regexp-steroids is an extension to visual-regexp which enables
the use of modern regexp engines (no more escaped group parentheses,
and other goodies!).

#+begin_src emacs-lisp
(use-package visual-regexp
  :init
  (use-package visual-regexp-steroids)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark) ; Need multiple cursors
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))

(defun nl/query-replace-regexp-history-clear ()
  "Using visual-regexp functions and query-replace-regexp in
the same session fails if there are invalid history characters in
the history (visual-regexp uses PCRE regexes). This function
clears the history."
  (interactive)
  (setq query-replace-defaults nil)
  (setq query-replace-history nil))
#+end_src

** [[https://github.com/cmpitg/wand][wand]]

Wand is an extension that allows users to select a piece of text and perform actions based on predefined patterns.

#+begin_src emacs-lisp
(use-package wand
  :bind (("<C-return>" . wand:execute))
  :config
  (wand:add-rule-by-pattern :match "\\$ "
                            :capture :after
                            :action popup-shell-command)
  (wand:add-rule-by-pattern :match "https?://"
                            :capture :whole
                            :action browse-url))
#+end_src

** [[https://github.com/capitaomorte/yasnippet][yasnippet]]

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Large collection of snippets: [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]].

#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :hook (prog-mode . yas-minor-mode)
  ;;:init
  ;;(yas-global-mode 1)
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all))
#+end_src

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]

** [[https://github.com/fxbois/web-mode][web-mode]]

#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.json\\'" . web-mode))
  :bind ("C-c s h" . nl/counsel-ag-html)
  :hook (web-mode  . nl/web-mode-hook)
  :preface
  (defun html-filename-p (filename)
    (string-match "\.html$" filename))

  (defun nl/counsel-ag-html ()
    "Perform counsel-ag on the project's HTML files."
    (interactive)
    (counsel-ag "" (projectile-project-root) "--html"))

  (defun nl/web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (prettier-js-mode)
    (yas-minor-mode))

  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-closing t
        web-mode-enable-auto-quoting t
        web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'typescript-tslint 'web-mode))
#+end_src

** [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]

Required by ivy-occur.

#+begin_src emacs-lisp
(use-package wgrep)
#+end_src

** [[https://github.com/tlh/workgroups.el][workgroups]]

#+begin_src emacs-lisp :tangle no
(use-package workgroups)
#+end_src

** [[https://github.com/purcell/whole-line-or-region][whole-line-or-region]]

Disabled since it does not work well with easy-kill (2019-01-31).

#+begin_src emacs-lisp :tangle no
(use-package whole-line-or-region
  :diminish (whole-line-or-region-local-mode)
  :custom
  (whole-line-or-region-global-mode t))
#+end_src

** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** [[https://github.com/jinzhu/zeal-at-point][zeal-at-point]]

Search the word at point with Zeal

Zeal is a simple offline API documentation browser inspired by Dash
(OS X app), available for Linux and Windows.

Using DevDocs.io now - 2017-10-19

#+begin_src emacs-lisp :tangle no
(use-package zeal-at-point
  ;;:diminish
  :commands zeal-at-point)
#+end_src

** [[https://github.com/thierryvolpiatto/zop-to-char][zop-to-char]]

#+begin_src emacs-lisp :tangle no
(use-package zop-to-char
  :bind ("M-z" . zop-up-to-char)
  :init
  (progn
    (setq zop-to-char-kill-keys '(?\C-k))
    (setq zop-to-char-quit-at-point-keys '(?\r))))
#+end_src

** [[https://github.com/fourier/ztree][ztree]]

#+BEGIN_QUOTE
Ztree is a project dedicated to implementation of several text-tree applications inside GNU Emacs.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package ztree
  :commands (ztree-diff ztree-dir))
#+end_src

** [[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]]

#+begin_src emacs-lisp
(use-package zzz-to-char
  :bind ("M-z" . zzz-up-to-char))
#+end_src


** Text Editing
*** [[https://github.com/emacsfodder/move-text][move-text]]

#+begin_src emacs-lisp
(use-package move-text
  :bind (("C-S-<up>" . move-text-up)
         ("C-S-<down>" . move-text-down)))
#+end_src
*** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

Sometimes you end up with cursors outside of your view. You can scroll
the screen to center on each cursor with ~C-v~ and ~M-v~.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :after selected
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-M->"       . mc/unmark-next-like-this)
         ("C-M-<"       . mc/unmark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("C-x C-m"     . mc/mark-all-dwim))
  :bind (:map selected-keymap
              ("C-'" . mc/edit-lines)
              ("."   . mc/mark-next-like-this)
              ("<"   . mc/unmark-next-like-this)
              ("C->" . mc/skip-to-next-like-this)
              (","   . mc/mark-previous-like-this)
              (">"   . mc/unmark-previous-like-this)
              ("C-<" . mc/skip-to-previous-like-this)
              ("y"   . mc/mark-next-symbol-like-this)
              ("Y"   . mc/mark-previous-symbol-like-this)
              ("w"   . mc/mark-next-word-like-this)
              ("W"   . mc/mark-previous-word-like-this)))
#+end_src

** Git
*** [[https://github.com/magit/magit][magit]]

A great interface for git projects. It's much more pleasant to use than the git interface on the
command line. Use an easy keybinding to access magit.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status))
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (setq-default vc-handled-backends '(Git))
  (setq magit-push-always-verify nil

        ;; only use A and B in Ediff
        magit-ediff-dwim-show-on-hunks t))
#+end_src

**** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then restores the old window
configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src
*** [[https://gitlab.com/pidu/git-timemachine][git-timemachine]]

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

** Helm
*** [[https://github.com/emacs-helm/helm][helm]]
**** Helm Config

GNU Global and projectile: use ~C-c p R~ to regenerate tag file.

#+begin_src emacs-lisp
(use-package helm
  ;;:load-path "~/src/github/elisp/helm"
  :demand t
  :pin melpa
  :diminish helm-mode
  :hook (helm-goto-line-before . helm-save-current-pos-to-mark-ring)
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("C-`" . helm-resume))
  :preface (require 'helm-config)
  :config
  ;; must set before helm-config, otherwise helm uses the default
  ;; prefix "C-x c", which is inconvenient because you can
  ;; accidentially press "C-x C-c"
  (setq ;;helm-M-x-fuzzy-match                  t
   ;;helm-bookmark-show-location           t
   ;;helm-buffers-fuzzy-matching           t
   ;;helm-completion-in-region-fuzzy-match t
   ;;helm-file-cache-fuzzy-match           t
   ;;helm-imenu-fuzzy-match                t
   ;;helm-mode-fuzzy-match                 t
   ;;helm-locate-fuzzy-match               t
   ;;helm-quick-update                     t
   ;;helm-recentf-fuzzy-match              t
   ;;helm-semantic-fuzzy-match             t

   ;;
   helm-split-window-in-side-p t           ; open helm buffer inside current window,
   ;; not occupy whole other window
   helm-ff-newfile-prompt-p nil
   helm-scroll-amount 4                    ; scroll 4 lines other window using
   ;; M-<next>/M-<prior>
   ;;helm-quick-update t                     ; do not display invisible candidates
   ;;helm-idle-delay 0.01                    ; be idle for this many seconds, before
   ;; updating in delayed sources.
   ;;helm-input-idle-delay 0.01              ; be idle for this many seconds, before
   ;; updating candidate buffer
   helm-ff-search-library-in-sexp t        ; search for library in `require` and
   ;; `declare-function` sexp.

   ;;helm-buffers-favorite-modes (append helm-buffers-favorite-modes
   ;;                                    '(picture-mode artist-mode))
   ;; limit the number of displayed canidates
   ;;helm-candidate-number-limit 100
   ;; show all candidates when set to 0
   ;;helm-M-x-requires-pattern 0
   helm-ff-file-name-history-use-recentf t
   ;; move to end or beginning of source when reaching top or bottom of source.
   helm-move-to-line-cycle-in-source t
   ;; Needed in helm-buffers-list
   ;;ido-use-virtual-buffers t
   ;; fuzzy matching buffer names when non--nil, useful in helm-mini that lists buffers
   ;;helm-buffers-fuzzy-matching t
   ;; truncate long lines
   ;;helm-truncate-lines t
   helm-autoresize-min-height 30
   helm-autoresize-max-height 30
   helm-display-header-line nil
   helm-buffer-max-length 45
   helm-yas-display-key-on-candidate t
   helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s"
   helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'")
   helm-mini-default-sources '(helm-source-buffers-list
                               helm-source-recentf
                               helm-source-bookmarks
                               helm-source-buffer-not-found))

  ;; Save current position to mark ring when jumping to a different place
  (helm-autoresize-mode 1)
  (helm-mode 1))

(defun nl/helm-eval-expression ()
  (interactive)
  (let ((selected-expression
         (helm-comp-read "Select an eval expression: " read-expression-history :buffer "Helm eval expressions")))
    ;;(message "selected: %s" selected-expression)
    (eval-expression (car (read-from-string selected-expression)))))

(defun nl/helm-async-shell-command ()
  (interactive)
  (let ((selected-command
         (helm-comp-read "Select a shell command: " shell-command-history :buffer "Helm shell commands")))
    (async-shell-command selected-command)))
#+end_src

**** Helm Key bindings

#+begin_src emacs-lisp
(with-eval-after-load 'helm-files
  ;; rebind tab to do persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  ;; list actions using C-z
  (define-key helm-map (kbd "C-z")  'helm-select-action)
  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward))
#+end_src

**** Helm Window config

(NOT WORKING) So that helm windows shows at the bottom.

- from http://www.reddit.com/r/emacs/comments/345vtl/make_helm_window_at_the_bottom_without_using_any/
- see also http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'helm
  (cond (window-system
         (add-to-list 'display-buffer-alist
                      `("^\\*[Hh]elm"
                        (display-buffer-in-side-window)
                        (inhibit-same-window . nil)
                        (reusable-frames . visible)
                        (side            . bottom)
                        (slot            . -1)
                        (window-height   . 0.15)))
         )))
#+end_src

**** Helm Other

Highlighting of token matches is a tad slow, let's speed it up.

#+begin_src emacs-lisp
(with-eval-after-load 'helm
  (setq helm-mp-highlight-delay 0.3))
#+end_src

I don't know why, but helm tries doing window management.  Please
stop:

#+begin_src emacs-lisp
(with-eval-after-load 'helm
  (setq helm-display-function 'pop-to-buffer))
#+end_src

*** [[https://github.com/syohex/emacs-helm-ag][helm-ag]]

Define my own function for ~C-o~ key mapping. Uses ~ace-select-window~
instead of ~find-file-other-window~.

#+begin_src emacs-lisp
(use-package helm-ag
  :pin melpa
  :commands helm-ag
  :bind (:map helm-ag-mode-map
              ("C-<return>" . nl/jump-other-window))
  :preface
  (defun nl/ace-find-file (filename)
    (setq helm-ag--last-default-directory default-directory)
    ;; use ace-select-window if there are more than 2 windows in the frame
    (let ((path (concat helm-ag--last-default-directory filename)))
      (if (> (length (window-list)) 2)
          (ace-select-window)
        (other-window 1))
      (find-file path)))

  (defun nl/jump-other-window ()
    (interactive)
    (let ((line (helm-current-line-contents)))
      (helm-ag--find-file-action line 'nl/ace-find-file helm-ag--search-this-file-p)))
  :custom
  ;;(helm-ag-use-temp-buffer nil) ; setting to 't' does not work with js2-mode
  (helm-ag-use-temp-buffer nil)
  )
#+end_src

*** [[https://github.com/emacs-jp/helm-c-yasnippet][helm-c-yasnippet]]

#+begin_src emacs-lisp
(use-package helm-c-yasnippet
  :commands helm-yas-complete
  ;;:init (use-package yasnippet)
  :bind ("C-c y" . helm-yas-complete))
#+end_src

*** [[https://github.com/lerouxrgd/helm-fd][helm-fd]]

2020-02-03 Disabled for now since it causes problems with Helm.

#+begin_src emacs-lisp
(use-package helm-fd
  :after helm
  :disabled
  :custom
  (helm-fd-cmd "fdfind")
  :bind (:map helm-map
              ("/" . helm-fd)))
#+end_src

*** [[https://github.com/PythonNut/helm-flx][helm-flx]]

#+begin_src emacs-lisp :tangle no
(use-package helm-flx
  :after helm
  :commands helm-flx-mode
  :config
  (helm-flx-mode +1)
  (setq helm-flx-for-helm-find-files t ;; t by default
        helm-flx-for-helm-locate t))
#+end_src

*** [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]]

#+begin_src emacs-lisp :tangle no
(use-package helm-gtags
  :commands (helm-gtags-mode)
  :bind (("M-." . helm-gtags-find-tag)
         ("M-," . helm-gtags-find-rtag))
  :custom
  (helm-gtags-path-style 'relative)
  (helm-gtags-ignore-case t)
  (helm-gtags-auto-update t))
#+end_src

*** [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]]

#+begin_src emacs-lisp
(use-package helm-lsp)
#+end_src

*** [[https://github.com/bbatsov/projectile][helm-projectile]]

#+begin_src emacs-lisp
(use-package helm-projectile
  :after helm
  :init (helm-projectile-on)
  ;;(setq compilation-read-command t)  ; do prompt for a compilation command
  )
#+end_src

*** [[https://github.com/cosmicexplorer/helm-rg][helm-rg]]

#+begin_src emacs-lisp
(use-package helm-rg)
#+end_src

*** [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]]

#+begin_src emacs-lisp :tangle no
(use-package helm-swoop
  :bind (("M-i" . helm-swoop))
  :config
  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t
        ;; If this value is t, split window inside the current window
        helm-swoop-split-with-multiple-windows nil
        ;; Optional face for line numbers
        ;; Face name is `helm-swoop-line-number-face`
        helm-swoop-use-line-number-face t))
#+end_src

*** [[https://github.com/brotzeitmacher/helm-xref][helm-xref]]

No longer using this since most development is now using lsp -
2020-05-29

#+begin_src emacs-lisp :tangle no
(use-package helm-xref
  :init
  (require 'helm-xref)
  :config
  ;;(setq xref-show-xrefs-function 'helm-xref-show-xrefs)
  )
#+end_src

** Coding

*** [[https://github.com/akicho8/string-inflection][string-inflection]]

#+begin_src emacs-lisp
(use-package string-inflection
  :bind
  (("C-c i" . string-inflection-cycle)
   ("C-c C" . string-inflection-camelcase)
   ("C-c L" . string-inflection-lower-camelcase)
   ("C-c J" . string-inflection-java-style-cycle)
   ))
#+end_src

** Programming Languages
*** Java
**** [[https://github.com/emacs-eclim/emacs-eclim][emacs-eclim]]

Provides Emacs with some Eclipse features for Java development. Eclim has to be installed first and
can be downloaded from [[http://eclim.org/install.html][here]].

2019-03-10 tyring out

#+begin_src emacs-lisp :tangle no
(use-package eclim
  ;; :load-path "~/src/github/elisp/emacs-eclim"
  :diminish eclim-mode
  :custom-face
  ;; keep consistent which other auto-complete backend.
  (ac-emacs-eclim-candidate-face ((t (:inherit ac-candidate-face))))
  (ac-emacs-eclim-selection-face ((t (:inherit ac-selection-face)))))
:preface
(defun nl/restart-eclim (workspace-dir)
  "Restarts the eclim server.  If it is currently active, the server is stopped first."
  (interactive (list (read-directory-name "Workspace directory: "
                                          eclimd-default-workspace nil t eclimd-default-workspace)))
  (if (get-buffer "*eclimd*") (stop-eclimd))
  (message "workspace dir: %s" workspace-dir)
  (cd-absolute workspace-dir)
  (eclimd-start workspace-dir)
  (switch-to-buffer "*eclimd*"))

(defun nl/gradle-javadoc ()
  "Uses gradle to build the Javadoc for the project."
  (interactive)
  (let* ((current-directory default-directory))
    (setq default-directory (locate-dominating-file default-directory "build.gradle"))
    (compile "gradle -q --console=plain javadoc")
    (setq default-directory current-directory)))

:init (use-package cl)
:config
(use-package company-emacs-eclim
  :commands company-emacs-eclim-setup)

(use-package eclimd
  ;;:load-path "~/src/github/elisp/emacs-eclim"
  :preface
  ;;(setq eclimd-autostart t)
  )

(setq eclim-print-debug-messages t)
;;eclim-nailgun-port 9092
;;eclim-eclimrc "~/.eclimrc"
(let ((eclipse-dir (expand-file-name "~/apps/eclipse/java/oxygen/eclipse")))
  (if (file-accessible-directory-p eclipse-dir)
      (progn
        (add-to-list 'eclim-eclipse-dirs eclipse-dir)
        (setq eclim-executable (or (concat eclipse-dir "/eclim") (executable-find "eclim"))
              eclimd-executable (or (concat eclipse-dir "/eclimd") (executable-find "eclimd"))
              ))))
(company-emacs-eclim-setup)
(global-company-mode t)
(setq eclim-auto-save t
      eclimd-wait-for-process nil
      ;;eclimd-default-workspace "~/workspace/"
      help-at-pt-display-when-idle t
      help-at-pt-timer-delay 0.1

      )
;; Call the help framework with the settings above & activate eclim-mode
(help-at-pt-set-timer))
#+end_src
**** [[https://github.com/jacobono/emacs-gradle-mode][emacs-gradle-mode]]

#+begin_src emacs-lisp
(use-package gradle-mode
  :disabled
  :diminish gradle-mode
  :init
  (gradle-mode 1))
#+end_src

**** [[https://github.com/emacs-lsp/lsp-java][lsp-java]]

#+begin_src emacs-lisp
(use-package lsp-java
  ;; :hook (java-mode-hook . lsp))
  :config (add-hook 'java-mode-hook 'lsp))
#+end_src

*** Javascript
**** [[https://github.com/mooz/js2-mode][js2-mode]]

#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :bind (("C-c s j" . nl/counsel-ag-js))
  :preface
  (defun js-filename-p (filename)
    (string-match "\.js$" filename))

  (defun nl/counsel-ag-js ()
    "Perform counsel-ag on the project's JavaScript files."
    (interactive)
    (counsel-ag "" (projectile-project-root) "--js"))

  (defun nl/counsel-ag-js-spec ()
    "Perform counsel-ag on the project's JavaScript files."
    (interactive)
    (counsel-ag "" (projectile-project-root) "-G Spec.js$"))

  (defun nl/webpack-find-file ()
    "From a webpack failure backtrace, opens the file under the cursor at the line specified."
    (interactive)
    (let (p1 p2 err-line filename file-with-proj-path)
      (save-some-buffers t)
      (setq p1 (line-beginning-position) )
      (setq p2 (line-end-position) )
      (setq err-line (buffer-substring-no-properties p1 p2))
      (save-match-data ; is usually a good idea
        (and (string-match "^\\(ERROR\\|WARNING\\) in \\.\\/\\([^$]+\\)" err-line)
             (setq filename (match-string 2 err-line))))
      (message "filename: %s" (expand-file-name filename (projectile-project-root)))
      (ace-select-window)
      (find-file (expand-file-name filename (projectile-project-root)))
      (goto-char (point-min))))

  (defun nl/webpack-find-next-error ()
    "searches for the next line starting with ERROR and then calls nl/webpack-find-file."
    (interactive)
    (next-line)
    (while (re-search-forward "^ERROR" nil t)
      (goto-char (match-beginning 0))
      (recenter 0)
      (nl/webpack-find-file)))

  :init
  (setq js2-global-externs '("define"
                             "jasmine"
                             "describe"
                             "fdescribe"
                             "fail"
                             "beforeEach"
                             "afterEach"
                             "inject"
                             "expect"
                             "spyOn"
                             "it"
                             "fit"
                             "xdescribe"
                             "xit"))
  :config
  (setq javascript-common-imenu-regex-list
        '(("Controller" "[. \t]controller([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Controller" "[. \t]controllerAs:[ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Filter" "[. \t]filter([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("State" "[. \t]state[(:][ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Factory" "[. \t]factory([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Service" "[. \t]service([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Module" "[. \t]module( *['\"]\\([a-zA-Z0-9_.]+\\)['\"], *\\[" 1)
          ("ngRoute" "[. \t]when(\\(['\"][a-zA-Z0-9_\/]+['\"]\\)" 1)
          ("Directive" "[. \t]directive([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Event" "[. \t]\$on([ \t]*['\"]\\([^'\"]+\\)" 1)
          ("Config" "[. \t]config([ \t]*function *( *\\([^\)]+\\)" 1)
          ("Config" "[. \t]config([ \t]*\\[ *['\"]\\([^'\"]+\\)" 1)
          ("OnChange" "[ \t]*\$(['\"]\\([^'\"]*\\)['\"]).*\.change *( *function" 1)
          ("OnClick" "[ \t]*\$([ \t]*['\"]\\([^'\"]*\\)['\"]).*\.click *( *function" 1)
          ("Watch" "[. \t]\$watch( *['\"]\\([^'\"]+\\)" 1)
          ("Function" "function[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*(" 1)
          ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
          ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)([^)'\"]*)[ \t]*{[ \t]*$" 1)
          ("Task" "[. \t]task([ \t]*['\"]\\([^'\"]+\\)" 1)
          ;;("Testcase" "^[ \t]*it(['\"][^']*['\"][ \t]*,[ \t]*function([^)'\"]*)[ \t]*{$" 1)
          ))

  ;; js-mode imenu enhancement
  ;; @see http://stackoverflow.com/questions/20863386/idomenu-not-working-in-javascript-mode
  (defun nl-js-imenu-make-index ()
    (save-excursion
      (imenu--generic-function javascript-common-imenu-regex-list)))

  (defun nl/javascript-mode-hook ()
    (nl/setup-indent 2) ; indent 2 spaces width
    (setq comment-multi-line t
          mode-name "JS2")
    (define-key js-mode-map [remap indent-new-comment-line]
      'c-indent-new-comment-line)
    (setq indent-tabs-mode nil)
    (setq imenu-create-index-function 'nl-js-imenu-make-index)
    (prettier-js-mode)
    (flycheck-mode t))

  ;;(eval-after-load 'js2-mode
  ;;  '(define-key js2-mode-map (kbd "RET") 'js2-line-break))

  ;;(setq ac-js2-evaluate-calls t)

  (setq-default js2-mode-show-parse-errors t)
  (setq-default js2-strict-missing-semi-warning t)
  (setq-default js2-strict-trailing-comma-warning t)

  :custom
  (js2-basic-offset 2)
  (js2-bounce-indent-p nil)
  (js2-highlight-level 3)
  :hook ((js2-mode . fic-mode)
         ;;(js2-mode-hook  . ac-js2-mode)
         (js2-mode . nl/javascript-mode-hook)
         (js2-mode . nl/common-prog-mode-settings)))
#+end_src
**** [[https://github.com/magnars/js2-refactor.el][js2-refactor]]

#+begin_src emacs-lisp
(use-package js2-refactor
  :after js2-mode
  :diminish js2-refactor-mode
  :hook (js-mode . js2-refactor-mode)
  :config
  (js2r-add-keybindings-with-prefix "C-c C-m"))
#+end_src

**** [[https://github.com/prettier/prettier-emacs][prettier-js]]

#+begin_src emacs-lisp
(use-package prettier-js
  :after (typescript-mode web-mode js-mode)
  :hook ((typescript-mode . prettier-js-mode)))
#+end_src
**** [[https://github.com/ternjs/tern][tern]]

#+begin_src emacs-lisp :tangle no
(use-package tern
  :commands tern-mode
  :load-path "~/src/github/elisp/tern/emacs"
  :diminish tern-mode
  :hook (js2-mode . tern-mode))

(use-package company-tern
  :init (add-to-list 'company-backends 'company-tern))
#+end_src

*** Lisp
**** [[https://github.com/slime/slime][slime]]

#+BEGIN_QUOTE
SLIME is the Superior Lisp Interaction Mode for Emacs.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package slime
  :config
  (setq inferior-lisp-program "/home/nelson/apps/clozureCL/ccl/lx86cl64")
  (setq slime-contribs '(slime-fancy)))
#+end_src

*** LUA
**** [[https://github.com/immerrr/lua-mode/tree/658bf8f6c2bdcfe41cd14f5fb651563b41d0fbaa][lua-mode]]

#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua"
  :hook
  (lua-mode . company-mode)
  :config
  (setq lua-indent-level 2)
  :interpreter ("lua" . lua-mode))
#+end_src

*** PHP
**** [[https://github.com/ejmr/php-mode][php-mode]]

Flycheck configuration taken from [[https://truongtx.me/2014/07/22/setup-php-development-environment-in-emacs][here]], but had to change the way the ~nl/php-checker~
checker is loaded.

#+begin_src emacs-lisp
(defun nl/php-mode-hook ()
  "My PHP mode configuration."
  (flycheck-mode t)
  (setq c-basic-offset 2)
  (php-set-style "nl/php"))

;; this style is based on the symfony2 style
(c-add-style
 "nl/php"
 '("php"
   (c-basic-offset . 2)
   (indent-tabs-mode . nil)
   (c-offsets-alist . ((statement-cont . php-lineup-hanging-semicolon)))
   (c-indent-comments-syntactically-p . t)
   (fill-column . 78)
   (require-final-newline . t)))

(use-package php-mode
  :mode "\\.php[345]?\\'"
  :hook (php-mode . nl/php-mode-hook)
  :custom
  (php-mode-coding-style (quote nl/php))
  (php-mode-lineup-cascaded-calls t))

(flycheck-define-checker nl/php-checker
  "A PHP syntax checker using the PHP command line interpreter.
     See URL http://php.net/manual/en/features.commandline.php."
  :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
            "-d" "log_errors=0" source)
  :error-patterns
  ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
          (message) " in " (file-name) " on line " line line-end))
  :modes (php-mode web-mode))

(eval-after-load 'flycheck
  '(add-to-list 'flycheck-checkers 'nl/php-checker))
#+end_src

**** [[https://github.com/nlamirault/phpunit.el][php-unit]]

#+begin_src emacs-lisp
(use-package phpunit
  :after (php-mode)
  :bind (:map php-mode-map
              ("C-c , t" . phpunit-current-test)
              ("C-c , c" . phpunit-current-class)
              ("C-c , p" . phpunit-current-project))
  :init
  (push `(php-error-regexp
          ,(rx line-start
               (zero-or-more "Trace:" space)
               "#" (one-or-more digit)
               (zero-or-more space)
               (group-n 1 (one-or-more (not (in space "(" "\n"))))
               "(" (group-n 2 (one-or-more digit))
               (zero-or-more not-newline))
          1 2)
        compilation-error-regexp-alist-alist)
  (push 'php-error-regexp compilation-error-regexp-alist)
  :custom
  (phpunit-arg "--stderr --debug"))
#+end_src
*** Python

https://www.mattduck.com/lsp-python-getting-started.html

pyright? [[https://www.reddit.com/r/emacs/comments/ih3q5x/lsp_for_python_sure_but_which_lsp_server/][lsp for python, sure. but which lsp server??]]

**** [[https://github.com/emacsorphanage/company-jedi][company-jedi]]

#+begin_src emacs-lisp
(use-package company-jedi
  :after company
  :config
  (add-to-list 'company-backends #'company-jedi))
#+end_src

**** [[https://github.com/jorgenschaefer/elpy][elpy]]

See [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][here]]

#+begin_src emacs-lisp
(use-package elpy
  :bind
  (:map elpy-mode-map
        ("C-M-n" . elpy-nav-forward-block)
        ("C-M-p" . elpy-nav-backward-block)
        ("M-<up>" . nil)
        ("M-<down>" . nil)
        ("M-<left>" . nil)
        ("M-<right>" . nil))
  :hook ((elpy-mode . flycheck-mode)
         (elpy-mode . (lambda ()
                        (set (make-local-variable 'company-backends)
                             '((elpy-company-backend :with company-yasnippet))))))
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  ;; fix for MacOS, see https://github.com/jorgenschaefer/elpy/issues/1550
  (setq elpy-shell-echo-output nil)
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-timeout 2))

(with-eval-after-load 'python (elpy-enable))
#+end_src

**** [[https://github.com/jorgenschaefer/pyvenv/tree/0bf4b87068e9040fc99afa85af1992247dd7aacd][pyvenv]]

#+begin_src emacs-lisp
(use-package pyvenv
  :config
  (pyvenv-mode 1))
#+end_src

**** [[https://melpa.org/#/python-mode][python-mode]]

Integrates with IPython.

#+begin_src emacs-lisp :tangle no
(use-package python-mode)
#+end_src

*** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :mode "\\.rs$"
  :hook
  (rust-mode . lsp)
  (rust-mode . nl/common-prog-mode-settings)
  :interpreter ("rust" . rust-mode)
  :config
  (setq rust-format-on-save t))

(use-package flycheck-rust
  :after rust-mode
  :hook (flycheck-mode . flycheck-rust-setup))
#+end_src

*** Scala
**** [[https://github.com/emacs-lsp/lsp-metals][lsp-metals]]

#+begin_src emacs-lisp
(use-package lsp-metals)
#+end_src

**** [[https://github.com/ensime/emacs-scala-mode/tree/master][scala-mode]]

#+begin_src emacs-lisp
(use-package scala-mode
  ;;:load-path "~/src/github/elisp/emacs-scala-mode"
  :mode "\\.s\\(cala\\|bt\\)$"
  :interpreter ("scala" . scala-mode)
  :hook
  (scala-mode . nl/scala-mode-hook)
  (before-save . nl/scala-before-save)
  :custom
  ;;(prettify-symbols-unprettify-at-point 'right-edge)
  (prettify-symbols-unprettify-at-point t)
  :preface
  (defun nl/scala-mode-hook ()
    (yas-minor-mode)
    (setq-default indent-tabs-mode nil)
    (setq compilation-ask-about-save nil
          prettify-symbols-alist scala-prettify-symbols-alist)
    (nl/common-prog-mode-settings)
    (prettify-symbols-mode))

  (defun nl/scala-before-save ()
    (when (eq major-mode 'scala-mode)
      (lsp-format-buffer)))

  (key-chord-define-global "jt" 'hydra-nl-scalatest/body)

  (defun nl/counsel-ag-scala ()
    "Perform counsel-ag on the project's Scala files."
    (interactive)
    (counsel-ag "" (projectile-project-root) "--scala"))

  (global-set-key (kbd "C-c s s") 'nl/counsel-ag-scala)
  :config
  (setq scala-indent:indent-value-expression t
        scala-indent:align-parameters t
        scala-indent:align-forms t
        scala-indent:default-run-on-strategy '2 ;; scala-indent:reluctant-strategy
        scala-indent:use-javadoc-style t)

  (push `(scala-error-regexp
          ,(rx bol
               "["
               (any "E" "W")
               "]"
               (zero-or-more space)
               (group-n 1 (one-or-more (not (in space ":" "\n"))))
               ":" (group-n 2 (one-or-more digit))
               ":" (group-n 3 (one-or-more digit))
               ":")
          1 2 3 2)
        compilation-error-regexp-alist-alist)

  (push 'scala-error-regexp compilation-error-regexp-alist))
#+end_src

**** [[https://github.com/ensime/emacs-sbt-mode][sbt-mode]]

No longer used since Scala Metals is now being used.

#+begin_src emacs-lisp
(use-package sbt-mode
  ;;:load-path "~/src/github/elisp/emacs-sbt-mode"
  :commands (sbt-start sbt-command)
  :preface
  (defun nl-sbt-mode-hook ()
    ;; compilation-skip-threshold tells the compilation minor-mode which type of compiler output can
    ;; be skipped. 1 = skip info 2 = skip info and warnings.
    (setq compilation-skip-threshold 1)

    ;; Bind C-a to 'comint-bol when in sbt-mode. This will move the cursor to just after prompt.
    (local-set-key (kbd "C-a") 'comint-bol)

    ;; Bind M-RET to 'comint-accumulate. This will allows one to add more than one line to the scala
    ;; console prompt before sending it for interpretation. It keeps the command history cleaner.
    (local-set-key (kbd "M-RET") 'comint-accumulate))


  (defun nl-sbt-command ()
    (interactive)
    (setq completing-read-function 'completing-read-default)
    (call-interactively 'sbt-command)
    (setq completing-read-function 'ivy-completing-read))

  ;; Ivy and =sbt-command= do not behave well together right now, define
  ;; our own wrapper function.
  ;; --testing--
  (defun sbt-command-ivy ()
    "Send a command to the sbt process of the current buffer's sbt project.
  Prompts for the command to send when in interactive mode. You can
  use tab completion.

  This command does the following:
    - displays the buffer moving focus to it if focus is t
    - erases the buffer
    - forgets about compilation errors

  The command is most usefull for running a compilation command
  that outputs errors."
    (interactive)
    (setq sbt:command-history-temp
          (ignore-errors (with-current-buffer (sbt:buffer-name) (ring-elements comint-input-ring))))
    (ivy-read (format "Command to run (default %s): " (sbt:get-previous-command))
              #'sbt:get-sbt-completions-for-command
              :action #'sbt:command
              :history 'sbt:command-history-temp
              :preselect (sbt:get-previous-command)
              :dynamic-collection t))

    ;;; https://github.com/ensime/emacs-sbt-mode/issues/139
  (setq sbt:program-options '("-Djline.terminal=auto"))

  :hook (sbt-mode . nl-sbt-mode-hook)
  :config

  ;; set this regex so that it knows about Play Framework SBT prompt
  (setq sbt:sbt-prompt-regexp "^\\[[^]]+\\]\\s-*\\$\\s-*"
        sbt:ansi-support t
        sbt:scroll-to-bottom-on-output nil)
  (setenv "EMACS" "true"))
#+end_src
*** TypeScript

#+begin_src emacs-lisp
(use-package typescript-mode
  :hook
  (typescript-mode . column-enforce-mode)
  (typescript-mode . rainbow-delimiters-mode)
  :config
  ;; when buiding with Angular CLI, the first error always contains "ERROR in"
  ;;
  ;; adjusting this regexp makes 'next-error' work in compilation mode
  ;;
  ;; (push `(typescript-tsc-error-regexp
  ;;         ,(rx line-start
  ;;              (zero-or-more "[tsl]")
  ;;              (zero-or-more space)
  ;;              (zero-or-one (* "ERROR" (zero-or-more space) "in" (zero-or-more space)))
  ;;              (group-n 1 (one-or-more (not (in space ":" "\n" "("))))
  ;;              (in ":" "(") (group-n 2 (one-or-more digit))
  ;;              (in ":" ",") (group-n 3 (one-or-more digit))
  ;;              (zero-or-more not-newline))
  ;;         1 2 3 2)
  ;;       compilation-error-regexp-alist-alist)

  ;; (push 'typescript-tsc-error-regexp compilation-error-regexp-alist)

  (push `(angular-html-error-regexp
          ,(rx line-start
               (zero-or-more space)
               (zero-or-one (* "ERROR" (zero-or-more space) "in" (zero-or-more space)))
               (group-n 1 (one-or-more (not (in space ":" "\n"))))
               (syntax open-parenthesis)
               (group-n 2 (one-or-more digit))
               "," (group-n 3 (one-or-more digit))
               (syntax close-parenthesis) ":")
          1 2 3 2)
        compilation-error-regexp-alist-alist)

  (push 'angular-html-error-regexp compilation-error-regexp-alist)

  ;; (add-to-list 'compilation-error-regexp-alist-alist
  ;;              `(typescript-tsc ,typescript-tsc-error-regexp 1 2 3 2))

  (push `(node-error-regexp
          ,(rx line-start
               (zero-or-more (not (in "\n")))
               (one-or-more "at" (one-or-more space))
               (zero-or-more (not (in "(")))
               (zero-or-more "(")
               (group-n 1 (one-or-more (not (in space ":" "\n"))))
               ":" (group-n 2 (one-or-more digit))
               ":" (group-n 3 (one-or-more digit))
               (zero-or-more not-newline))
          1 2 3 2)
        compilation-error-regexp-alist-alist)

  (push 'node-error-regexp compilation-error-regexp-alist)

  (add-to-list 'compilation-error-regexp-alist-alist
               '(typescript-tslint
                 "^\\(?:\\(Error\\|Warning\\)\\):[[:blank:]]\\([^:]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
                 2 3 4 1))

  (setq compilation-error-regexp-alist
        (cons 'typescript-tslint compilation-error-regexp-alist))

  (defconst
    nl-typescript-prettify-symbols-alist
    '(("=>" . ?⇒)
      ("<=" . ?≤)
      (">=" . ?≥)
      ("===" . ?≡)
      ("!" . ?¬)
      ("!=" . ?≠)
      ("!==" . ?≢)
      ("&&" . ?∧)
      ("||" . ?∨)))

  (setq prettify-symbols-alist nl-typescript-prettify-symbols-alist))
#+end_src
**** [[https://github.com/ananthakumaran/tide][tide]]

#+begin_src emacs-lisp :tangle no
(use-package tide
  :after (typescript-mode company flycheck)
  :bind (:map tide-mode-map
              ("C-c C-t f" . tide-fix)
              ("C-c C-t n" . tide-nav)
              ("C-c C-t o" . tide-organize-imports)
              ("C-c C-t r" . tide-rename-symbol)
              ("C-c C-t x" . tide-references))
  :init
  (use-package typescript-mode)

  :config
  (setq tide-sync-request-timeout 5
        tide-server-max-response-length 204800)

  (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)



  (defun nl-tide-mode-hook ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1)
    (prettier-js-mode)
    (nl/common-prog-mode-settings)
    (setq prettify-symbols-alist nl-typescript-prettify-symbols-alist
          prettify-symbols-unprettify-at-point 'right-edge
          company-tooltip-align-annotations t) ;; aligns annotation to the right hand side
    (setq-default typescript-indent-level 2))

  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (typescript-mode . nl-tide-mode-hook)
         (typescript-mode . column-enforce-mode)
         (typescript-mode . rainbow-delimiters-mode)))
#+end_src

* Computer-specific settings

Load some computer-specific settings, such as the name and and email address. The way the settings
are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar Sveen's]] config.

#+begin_src emacs-lisp
(defvar nl/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(require 's)
(let ((user-dir (concat user-emacs-directory "users")))
  (when (file-directory-p user-dir)
    (setq nl/user-settings-dir
          (concat user-dir "/" (s-trim (shell-command-to-string "hostname -s"))))
    (add-to-list 'load-path nl/user-settings-dir)))

;; Load settings specific for the current user
(when (file-exists-p nl/user-settings-dir)
  (mapc 'load (directory-files nl/user-settings-dir nil "^[^#].*el$")))
#+end_src

* Misc
** Constants

Is some cases we need to know what type of OS Emacs is running under.

#+begin_src emacs-lisp :tangle no
(defconst ostype-linux
  (if (integer-or-marker-p
       (string-match "linux" system-configuration)) t nil))

(defconst ostype-windows
  (if (integer-or-marker-p
       (string-match "pc-mingw32" system-configuration)) t nil))
#+end_src

** Aligning things

Align by colons (handy for JavaScript), align by commas, and align by
equal signs.

Borrowed from:

http://danconnor.com/post/5028ac91e8891a000000111f/align_and_columnize_key_value_data_in_emacs

#+begin_src emacs-lisp
(defun align-colons (beg end)
  (interactive "r")
  (align-regexp beg end ":\\(\\s-*\\)" 1 1 t))

(defun align-commas (beg end)
  (interactive "r")
  (align-regexp beg end ",\\(\\s-*\\)" 1 1 t))

(defun align-equals (beg end)
  (interactive "r")
  (align-regexp beg end "\\(\\s-*\\)=" 1 1 t))

(defun align-parameters (beg end)
  (interactive "r")
  (align-regexp beg end "\\w+\\(\\s-*\\)\\w+,?" 1 1 t))

(defhydra hydra-nl-align (:hint nil)
  (":" align-colons "colons" :color blue :column "Align things")
  ("," align-commas "commas" :color blue)
  ("=" align-equals "equals" :color blue)
  ("p" align-parameters "parameters" :color blue))

(key-chord-define-global "aa" 'hydra-nl-align/body)
#+end_src

** Font sizes

Using this hydra instead of method below, which is tangled out.

#+begin_src emacs-lisp
;;
;; Taken from http://doc.rix.si/org/fsem.html
;;
(defhydra hydra-zoom (global-map "C-c z")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+end_src

=C-c C-+= and =C-c C--= are pretty useful, but only resize the current
buffer.  Here's a hack using ~set-frame-font~ and altering the font
size only:

#+begin_src emacs-lisp :tangle no
(defun nl/alter-frame-font-size (fn)
  (let* ((current-font-name (frame-parameter nil 'font))
         (decomposed-font-name (x-decompose-font-name current-font-name))
         (font-size (string-to-int (aref decomposed-font-name 5))))
    (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
    (set-frame-font (x-compose-font-name decomposed-font-name))))

(defun nl/inc-frame-font-size ()
  (interactive)
  (nl/alter-frame-font-size '1+))

(defun nl/dec-frame-font-size ()
  (interactive)
  (nl/alter-frame-font-size '1-))

(global-set-key (kbd "C-+") 'nl/inc-frame-font-size)
(global-set-key (kbd "C--") 'nl/dec-frame-font-size)
#+end_src

** Date and time stamps

Used for inserting date and time stamps, or date stamps into the
current buffer at the current location. I define my own format for
these.

#+begin_src emacs-lisp
(defconst nl/dts-format-string "%Y-%m-%d %H:%M:%S"
  "A string specifying the format of the date-time stamp.
Refer to the documentation for 'format-time-string' for an explanation of the
meta characters available for use in this string.  Non-meta characters will
be inserted into the buffer without interpretation.")

(defvar nl/ds-format-string "%Y-%m-%d"
  "A string specifying the format of the date stamp.
Refer to the documentation for 'format-time-string' for an explanation of the
meta characters available for use in this string.  Non-meta characters will
be inserted into the buffer without interpretation.")

(defun nl/insert-dts ()
  "Insert the date and time into the current buffer at the current location.
See the documentation for nl/dts-format-string to change the format of the
date-time stamp."
  (interactive)
  (insert (format-time-string nl/dts-format-string (current-time))))

(defun nl/insert-ds ()
  "Insert the date into the current buffer at the current location.
See the documentation for nl/dts-format-string to change the format of the
date-time stamp."
  (interactive)
  (insert (format-time-string nl/ds-format-string (current-time))))

#+end_src

** Occur

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))
#+end_src

** Camelcase

*** To Upper

Coverts camel case words to uppercase with underscore as delimiters.

#+begin_src emacs-lisp
(defun nl/camelcase-to-upper ()
  (interactive)
  (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning)(region-end))
  (upcase-region (region-beginning)(region-end)))
#+end_src

*** To Snake Case

- from [[https://stackoverflow.com/questions/9288181/converting-from-camelcase-to-in-emacs][Stack Overflow Question]]

#+begin_src emacs-lisp
(defun nl/toggle-camelcase-underscores ()
  "Toggle between camelcase and underscore notation for the symbol at point."
  (interactive)
  (save-excursion
    (let* ((bounds (bounds-of-thing-at-point 'symbol))
           (start (car bounds))
           (end (cdr bounds))
           (currently-using-underscores-p (progn (goto-char start)
                                                 (re-search-forward "_" end t))))
      (if currently-using-underscores-p
          (progn
            (upcase-initials-region start end)
            (replace-string "_" "" nil start end)
            (downcase-region start (1+ start)))
        (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ start) end)
        (downcase-region start (cdr (bounds-of-thing-at-point 'symbol)))))))
#+end_src

#+RESULTS:
: nl/toggle-camelcase-underscores

** Windows

*** Functions

Views the same file side by side:

#+begin_src emacs-lisp
(defun toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
  buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Can't touch this!"
     "%s is up for grabs.")
   (current-buffer)))

;; (global-set-key (kbd "C-c d") 'toggle-window-dedicated)

;; see https://www.reddit.com/r/emacs/comments/80pd2q/anyone_could_help_me_with_window_management/
;; possible values are: display-buffer-same-window, display-buffer-pop-up-window, display-buffer-reuse-window
;;
;; Commented out since it is being configured in the "Side Windows" section now (2019-02-20)
;;
;; (add-to-list 'display-buffer-alist
;;              '("\*xref\*" . (display-buffer-same-window)))

(defun nl/frame-grow-horizontally ()
  "Set the size and position of the Emacs window."
  (interactive)
  (let ((frame (selected-frame)))
    (set-frame-size frame (* 2 (frame-width)) (frame-height)))
  (split-window-right))

(defun nl/frame-shrink-horizontally ()
  "Set the size and position of the Emacs window."
  (interactive)
  (when (> (length (window-list)) 1)
    (delete-other-windows))
  (let ((frame (selected-frame)))
    (set-frame-size frame (/ (frame-width) 2) (frame-height))))

(defun nl-frame-resize ()
  "Resizes the frame based on its current width."
  (interactive)
  (if (<= (frame-width) 120)
      (nl/frame-grow-horizontally)
    (nl/frame-shrink-horizontally)))

(global-set-key [f9] 'nl-frame-resize)

(defun nl/split-view-same-file ()
  (interactive)
  (windmove-right)
  (delete-window)
  (split-window-right)
  (windmove-right))

(global-set-key [S-f9] 'nl/split-view-same-file)

(defun nl/-set-transparency (inc)
  "Increase or decrease the selected frame transparency"
  (let* ((alpha (frame-parameter (selected-frame) 'alpha))
         (next-alpha (cond ((not alpha) 100)
                           ((> (- alpha inc) 100) 100)
                           ((< (- alpha inc) 0) 0)
                           (t (- alpha inc)))))
    (set-frame-parameter (selected-frame) 'alpha next-alpha)))

(defhydra hydra-transparency (:columns 2)
  "
  ALPHA : [ %(frame-parameter nil 'alpha) ]
  "
  ("j" (lambda () (interactive) (nl/-set-transparency +1)) "+ more")
  ("k" (lambda () (interactive) (nl/-set-transparency -1)) "- less")
  ("J" (lambda () (interactive) (nl/-set-transparency +10)) "++ more")
  ("K" (lambda () (interactive) (nl/-set-transparency -10)) "-- less")
  ("=" (lambda (value) (interactive "nTransparency Value 0 - 100 opaque:")
         (set-frame-parameter (selected-frame) 'alpha value)) "Set to ?" :color blue))

(global-set-key (kbd "C-c t") 'hydra-transparency/body)
#+end_src

*** Font

#+begin_src emacs-lisp :tangle no
(when ostype-windows
  (set-face-attribute 'default nil :font "InputMonoCondensed Medium-9"))
#+end_src

** Narrow or widen

From [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Artur Malabarba]]'s blog:

#+begin_src emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun,
whichever applies first. Narrowing to org-src-block actually
calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if you
         ;; don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

;;(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only copy it
;; if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
(add-hook 'LaTeX-mode-hook
          (lambda () (define-key LaTeX-mode-map "\C-xn" nil)))
(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))

(defun modi/multi-pop-to-mark (orig-fun &rest args)
  "Call ORIG-FUN until the cursor moves.
Try the repeated popping up to 10 times."
  (let ((p (point)))
    (dotimes (i 10)
      (when (= p (point))
        (apply orig-fun args)))))
(advice-add 'pop-to-mark-command :around
            #'modi/multi-pop-to-mark)
#+end_src

** Search symbol

From [[http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source%3Drss][Endless Parentheses blog]].

#+begin_src emacs-lisp
(defun endless/isearch-symbol-with-prefix (p)
  "Like isearch, unless prefix argument is provided.
With a prefix argument P, isearch for the symbol at point."
  (interactive "P")
  (let ((current-prefix-arg nil))
    (call-interactively
     (if p #'isearch-forward-symbol-at-point
       #'isearch-forward))))

(global-set-key [remap isearch-forward]
                #'endless/isearch-symbol-with-prefix)
#+end_src

** Query replace

#+begin_src emacs-lisp
(defun nl/query-replace-regexp-at-point ()
  "Runs query-replace-regexp on the word at point"
  (interactive)
  (let (bounds pos1 pos2 word-at-point replace-with (current-subword-mode-setting subword-mode))
    (subword-mode 0)
    (setq bounds (bounds-of-thing-at-point 'word)
          pos1 (car bounds)
          pos2 (cdr bounds)
          word-at-point (downcase (buffer-substring-no-properties pos1 pos2)))
    (subword-mode current-subword-mode-setting) ;; restore subword-mode to original value
    ;;(message "%s" word-at-point)
    (setq replace-with (read-from-minibuffer (format "Replace \"%s\" with: " word-at-point)))
    ;; (message "subword-mode-setting: %s, word-at-point: %s, replace-with: %s"
    ;;          subword-mode-setting word-at-point replace-with)
    (back-to-indentation) ;; goto beginning of line
    (query-replace-regexp word-at-point replace-with)))
#+end_src

** Strip HTML

#+begin_src emacs-lisp
(defun nl/strip-html ()
  "Remove HTML tags from the current buffer,
   (this will affect the whole buffer regardless of the restrictions in effect)."
  (interactive "*")
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (while (re-search-forward "<[^<]*>" (point-max) t)
        (replace-match "\\1"))
      (goto-char (point-min))
      (replace-string "&copy;" "(c)")
      (goto-char (point-min))
      (replace-string "&amp;" "&")
      (goto-char (point-min))
      (replace-string "&lt;" "<")
      (goto-char (point-min))
      (replace-string "&gt;" ">")
      (goto-char (point-min)))))
#+end_src

** Smarter Backward kill word

Taken from: https://old.reddit.com/r/emacs/comments/bz9rxn/weekly_tipstricketc_thread/

#+begin_src emacs-lisp :tangle no
(defun user/smarter-backward-kill-word ()
  "Deletes the previous word, respecting:
  1. If the cursor is at the beginning of line, delete the '\n'.
  2. If there is only whitespace, delete only to beginning of line.
  3. If there is whitespace, delete whitespace and check 4-5.
  4. If there are other characters instead of words, delete one only char.
  5. If it's a word at point, delete it."
  (interactive)

  (if (bolp)
      ;; 1
      (delete-char -1)

    (if (string-match-p "^[[:space:]]+$"
                        (buffer-substring-no-properties
                         (line-beginning-position) (point)))
        ;; 2
        (delete-horizontal-space)

      (when (thing-at-point 'whitespace)
        ;; 3
        (delete-horizontal-space))

      (if (thing-at-point 'word)
          ;; 5
          (let ((start (car (bounds-of-thing-at-point 'word)))
                (end (point)))
            (if (> end start)
                (delete-region start end)
              (delete-char -1)))
        ;; 4
        (delete-char -1)))))
(global-set-key [remap backward-kill-word] #'user/smarter-backward-kill-word)
#+end_src
** Quit Current Context

From: https://with-emacs.com/posts/tips/quit-current-context/

#+begin_src emacs-lisp
(defun keyboard-quit-context+ ()
  "Quit current context.

This function is a combination of `keyboard-quit' and
`keyboard-escape-quit' with some parts omitted and some custom
behavior added."
  (interactive)
  (cond ((region-active-p)
         ;; Avoid adding the region to the window selection.
         (setq saved-region-selection nil)
         (let (select-active-regions)
           (deactivate-mark)))
        ((eq last-command 'mode-exited) nil)
        (current-prefix-arg
         nil)
        (defining-kbd-macro
          (message
           (substitute-command-keys
            "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
          (cancel-kbd-macro-events))
        ((active-minibuffer-window)
         (when (get-buffer-window "*Completions*")
           ;; hide completions first so point stays in active window when
           ;; outside the minibuffer
           (minibuffer-hide-completions))
         (abort-recursive-edit))
        (t
         (when completion-in-region-mode
           (completion-in-region-mode -1))
         (let ((debug-on-quit nil))
           (signal 'quit nil)))))

(global-set-key [remap keyboard-quit] #'keyboard-quit-context+)
#+end_src

** helm-treemacs-icons

#+begin_src emacs-lisp
(with-eval-after-load 'ace-window
  (require 'helm-treemacs-icons)
  (helm-treemacs-icons-enable))
#+end_src

** [[https://protesilaos.com/dotemacs/][Protesilaos Stavrou]]

Prot's config has a lot of nice things.

#+begin_src emacs-lisp
(use-package emacs
  :commands (prot/window-dired-vc-root-left
             prot/make-frame-floating-with-current-buffer
             prot/display-buffer-at-bottom)
  :config
  (defun prot/window-dired-vc-root-left ()
    "Open root directory of current version-controlled repository
or the present working directory with `dired' and bespoke window
parameters.  This is meant as a proof-of-concept function,
illustrating how to leverage window rules to display a buffer,
plus a few concomitant extras."
    (interactive)
    (let ((dir (if (eq (vc-root-dir) nil)
                   (dired-noselect default-directory)
                 (dired-noselect (vc-root-dir)))))
      (display-buffer-in-side-window
       dir `((side . left)
             (slot . -1)
             (window-width . 0.16)
             (window-parameters . ((no-other-window . t)
                                   (no-delete-other-windows . t)
                                   (mode-line-format . (" "
                                                        mode-line-buffer-identification))))))
      (with-current-buffer dir
        (rename-buffer "*Dired-Side*")
        (setq-local window-size-fixed 'width)))
    (with-eval-after-load 'ace-window
      (when (boundp 'aw-ignored-buffers)
        (add-to-list 'aw-ignored-buffers "*Dired-Side*"))))

  (defun prot/make-frame-floating-with-current-buffer ()
    "Display the current buffer in a new floating frame.

This passes certain parameters to the newly created frame:

- use a different name than the default;
- use a graphical frame;
- do not display the minibuffer.

The name is meant to be used by the external rules of my tiling
window manager (BSPWM) to present the frame in a floating state."
    (interactive)
    (make-frame '((name . "my_float_window")
                  (window-system . x)
                  (minibuffer . nil))))

  (defun prot/display-buffer-at-bottom ()
    "Move the current buffer to the bottom of the frame.  This is
useful to take a buffer out of a side window.

The window parameters of this function are provided mostly for
didactic purposes."
    (interactive)
    (let ((buffer (current-buffer)))
      (with-current-buffer buffer
        (delete-window)
        (display-buffer-at-bottom
         buffer `((window-parameters . ((mode-line-format . (" "
                                                             mode-line-buffer-identification))))))))))
#+end_src


** From [[https://azzamsa.com/blog/scripts-el/#change-selected-region-to-snake-case][Useful Emacs Lisp Scripts]]

#+begin_src emacs-lisp
(defun to-snake-case (start end)
  "Change selected text to snake case format"
  (interactive "r")
  (if (use-region-p)
      (let ((camel-case-str (buffer-substring start end)))
        (delete-region start end)
        (insert (s-snake-case camel-case-str)))
    (message "No region selected")))

(defun play-reminder-sound ()
  (interactive)
  (start-process "" nil "mpv" "/usr/share/sounds/freedesktop/stereo/suspend-error.oga"))

(defun remind-me ()
  "Notify with a sound after certain time"
  (interactive)
  (let ((time (read-string "Time (min|sec): " "10 min")))
    (message "I will remind you after %s" time)
    (run-at-time time nil #'play-reminder-sound)))

(defun light-set-value ()
  "Set light value directly inside Emacs"
  (interactive)
  (let* ((current-value (s-trim (shell-command-to-string "light -G")))
         (light-value (read-string "Set Value: " current-value)))
    (start-process "" nil "light" "-S" light-value)))
#+end_src

# Local Variables:
# org-src-preserve-indentation: nil
# org-edit-src-content-indentation: 0
# End:
